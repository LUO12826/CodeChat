// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pbx {

  /// <summary>Holder for reflection information generated from model.proto</summary>
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb2RlbC5wcm90bxIDcGJ4IggKBlVudXNlZCIsCg5EZWZhdWx0QWNzTW9k",
            "ZRIMCgRhdXRoGAEgASgJEgwKBGFub24YAiABKAkiKQoKQWNjZXNzTW9kZRIM",
            "CgR3YW50GAEgASgJEg0KBWdpdmVuGAIgASgJIicKBlNldFN1YhIPCgd1c2Vy",
            "X2lkGAEgASgJEgwKBG1vZGUYAiABKAkiTQoKQ2xpZW50Q3JlZBIOCgZtZXRo",
            "b2QYASABKAkSDQoFdmFsdWUYAiABKAkSEAoIcmVzcG9uc2UYAyABKAkSDgoG",
            "cGFyYW1zGAQgASgMIlQKB1NldERlc2MSKAoLZGVmYXVsdF9hY3MYASABKAsy",
            "Ey5wYnguRGVmYXVsdEFjc01vZGUSDgoGcHVibGljGAIgASgMEg8KB3ByaXZh",
            "dGUYAyABKAwidQoHR2V0T3B0cxIZChFpZl9tb2RpZmllZF9zaW5jZRgBIAEo",
            "AxIMCgR1c2VyGAIgASgJEg0KBXRvcGljGAMgASgJEhAKCHNpbmNlX2lkGAQg",
            "ASgFEhEKCWJlZm9yZV9pZBgFIAEoBRINCgVsaW1pdBgGIAEoBSJrCghHZXRR",
            "dWVyeRIMCgR3aGF0GAEgASgJEhoKBGRlc2MYAiABKAsyDC5wYnguR2V0T3B0",
            "cxIZCgNzdWIYAyABKAsyDC5wYnguR2V0T3B0cxIaCgRkYXRhGAQgASgLMgwu",
            "cGJ4LkdldE9wdHMibQoIU2V0UXVlcnkSGgoEZGVzYxgBIAEoCzIMLnBieC5T",
            "ZXREZXNjEhgKA3N1YhgCIAEoCzILLnBieC5TZXRTdWISDAoEdGFncxgDIAMo",
            "CRIdCgRjcmVkGAQgASgLMg8ucGJ4LkNsaWVudENyZWQiIwoIU2VxUmFuZ2US",
            "CwoDbG93GAEgASgFEgoKAmhpGAIgASgFImoKCENsaWVudEhpEgoKAmlkGAEg",
            "ASgJEhIKCnVzZXJfYWdlbnQYAiABKAkSCwoDdmVyGAMgASgJEhEKCWRldmlj",
            "ZV9pZBgEIAEoCRIMCgRsYW5nGAUgASgJEhAKCHBsYXRmb3JtGAYgASgJIq8B",
            "CglDbGllbnRBY2MSCgoCaWQYASABKAkSDwoHdXNlcl9pZBgCIAEoCRIOCgZz",
            "Y2hlbWUYAyABKAkSDgoGc2VjcmV0GAQgASgMEg0KBWxvZ2luGAUgASgIEgwK",
            "BHRhZ3MYBiADKAkSGgoEZGVzYxgHIAEoCzIMLnBieC5TZXREZXNjEh0KBGNy",
            "ZWQYCCADKAsyDy5wYnguQ2xpZW50Q3JlZBINCgV0b2tlbhgJIAEoDCJYCgtD",
            "bGllbnRMb2dpbhIKCgJpZBgBIAEoCRIOCgZzY2hlbWUYAiABKAkSDgoGc2Vj",
            "cmV0GAMgASgMEh0KBGNyZWQYBCADKAsyDy5wYnguQ2xpZW50Q3JlZCJqCglD",
            "bGllbnRTdWISCgoCaWQYASABKAkSDQoFdG9waWMYAiABKAkSIAoJc2V0X3F1",
            "ZXJ5GAMgASgLMg0ucGJ4LlNldFF1ZXJ5EiAKCWdldF9xdWVyeRgEIAEoCzIN",
            "LnBieC5HZXRRdWVyeSI3CgtDbGllbnRMZWF2ZRIKCgJpZBgBIAEoCRINCgV0",
            "b3BpYxgCIAEoCRINCgV1bnN1YhgDIAEoCCKdAQoJQ2xpZW50UHViEgoKAmlk",
            "GAEgASgJEg0KBXRvcGljGAIgASgJEg8KB25vX2VjaG8YAyABKAgSJgoEaGVh",
            "ZBgEIAMoCzIYLnBieC5DbGllbnRQdWIuSGVhZEVudHJ5Eg8KB2NvbnRlbnQY",
            "BSABKAwaKwoJSGVhZEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEo",
            "DDoCOAEiRAoJQ2xpZW50R2V0EgoKAmlkGAEgASgJEg0KBXRvcGljGAIgASgJ",
            "EhwKBXF1ZXJ5GAMgASgLMg0ucGJ4LkdldFF1ZXJ5IkQKCUNsaWVudFNldBIK",
            "CgJpZBgBIAEoCRINCgV0b3BpYxgCIAEoCRIcCgVxdWVyeRgDIAEoCzINLnBi",
            "eC5TZXRRdWVyeSLgAQoJQ2xpZW50RGVsEgoKAmlkGAEgASgJEg0KBXRvcGlj",
            "GAIgASgJEiEKBHdoYXQYAyABKA4yEy5wYnguQ2xpZW50RGVsLldoYXQSHgoH",
            "ZGVsX3NlcRgEIAMoCzINLnBieC5TZXFSYW5nZRIPCgd1c2VyX2lkGAUgASgJ",
            "Eh0KBGNyZWQYBiABKAsyDy5wYnguQ2xpZW50Q3JlZBIMCgRoYXJkGAcgASgI",
            "IjcKBFdoYXQSBwoDTVNHEAASCQoFVE9QSUMQARIHCgNTVUIQAhIICgRVU0VS",
            "EAMSCAoEQ1JFRBAEIkgKCkNsaWVudE5vdGUSDQoFdG9waWMYASABKAkSGwoE",
            "d2hhdBgCIAEoDjINLnBieC5JbmZvTm90ZRIOCgZzZXFfaWQYAyABKAUijgMK",
            "CUNsaWVudE1zZxIbCgJoaRgBIAEoCzINLnBieC5DbGllbnRIaUgAEh0KA2Fj",
            "YxgCIAEoCzIOLnBieC5DbGllbnRBY2NIABIhCgVsb2dpbhgDIAEoCzIQLnBi",
            "eC5DbGllbnRMb2dpbkgAEh0KA3N1YhgEIAEoCzIOLnBieC5DbGllbnRTdWJI",
            "ABIhCgVsZWF2ZRgFIAEoCzIQLnBieC5DbGllbnRMZWF2ZUgAEh0KA3B1YhgG",
            "IAEoCzIOLnBieC5DbGllbnRQdWJIABIdCgNnZXQYByABKAsyDi5wYnguQ2xp",
            "ZW50R2V0SAASHQoDc2V0GAggASgLMg4ucGJ4LkNsaWVudFNldEgAEh0KA2Rl",
            "bBgJIAEoCzIOLnBieC5DbGllbnREZWxIABIfCgRub3RlGAogASgLMg8ucGJ4",
            "LkNsaWVudE5vdGVIABIUCgxvbl9iZWhhbGZfb2YYCyABKAkSIgoKYXV0aF9s",
            "ZXZlbBgMIAEoDjIOLnBieC5BdXRoTGV2ZWxCCQoHTWVzc2FnZSI5CgpTZXJ2",
            "ZXJDcmVkEg4KBm1ldGhvZBgBIAEoCRINCgV2YWx1ZRgCIAEoCRIMCgRkb25l",
            "GAMgASgIIu0BCglUb3BpY0Rlc2MSEgoKY3JlYXRlZF9hdBgBIAEoAxISCgp1",
            "cGRhdGVkX2F0GAIgASgDEhIKCnRvdWNoZWRfYXQYAyABKAMSIwoGZGVmYWNz",
            "GAQgASgLMhMucGJ4LkRlZmF1bHRBY3NNb2RlEhwKA2FjcxgFIAEoCzIPLnBi",
            "eC5BY2Nlc3NNb2RlEg4KBnNlcV9pZBgGIAEoBRIPCgdyZWFkX2lkGAcgASgF",
            "Eg8KB3JlY3ZfaWQYCCABKAUSDgoGZGVsX2lkGAkgASgFEg4KBnB1YmxpYxgK",
            "IAEoDBIPCgdwcml2YXRlGAsgASgMIq0CCghUb3BpY1N1YhISCgp1cGRhdGVk",
            "X2F0GAEgASgDEhIKCmRlbGV0ZWRfYXQYAiABKAMSDgoGb25saW5lGAMgASgI",
            "EhwKA2FjcxgEIAEoCzIPLnBieC5BY2Nlc3NNb2RlEg8KB3JlYWRfaWQYBSAB",
            "KAUSDwoHcmVjdl9pZBgGIAEoBRIOCgZwdWJsaWMYByABKAwSDwoHcHJpdmF0",
            "ZRgIIAEoDBIPCgd1c2VyX2lkGAkgASgJEg0KBXRvcGljGAogASgJEhIKCnRv",
            "dWNoZWRfYXQYCyABKAMSDgoGc2VxX2lkGAwgASgFEg4KBmRlbF9pZBgNIAEo",
            "BRIWCg5sYXN0X3NlZW5fdGltZRgOIAEoAxIcChRsYXN0X3NlZW5fdXNlcl9h",
            "Z2VudBgPIAEoCSI7CglEZWxWYWx1ZXMSDgoGZGVsX2lkGAEgASgFEh4KB2Rl",
            "bF9zZXEYAiADKAsyDS5wYnguU2VxUmFuZ2UinwEKClNlcnZlckN0cmwSCgoC",
            "aWQYASABKAkSDQoFdG9waWMYAiABKAkSDAoEY29kZRgDIAEoBRIMCgR0ZXh0",
            "GAQgASgJEisKBnBhcmFtcxgFIAMoCzIbLnBieC5TZXJ2ZXJDdHJsLlBhcmFt",
            "c0VudHJ5Gi0KC1BhcmFtc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoDDoCOAEizwEKClNlcnZlckRhdGESDQoFdG9waWMYASABKAkSFAoMZnJv",
            "bV91c2VyX2lkGAIgASgJEhEKCXRpbWVzdGFtcBgHIAEoAxISCgpkZWxldGVk",
            "X2F0GAMgASgDEg4KBnNlcV9pZBgEIAEoBRInCgRoZWFkGAUgAygLMhkucGJ4",
            "LlNlcnZlckRhdGEuSGVhZEVudHJ5Eg8KB2NvbnRlbnQYBiABKAwaKwoJSGVh",
            "ZEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoDDoCOAEi5AIKClNl",
            "cnZlclByZXMSDQoFdG9waWMYASABKAkSCwoDc3JjGAIgASgJEiIKBHdoYXQY",
            "AyABKA4yFC5wYnguU2VydmVyUHJlcy5XaGF0EhIKCnVzZXJfYWdlbnQYBCAB",
            "KAkSDgoGc2VxX2lkGAUgASgFEg4KBmRlbF9pZBgGIAEoBRIeCgdkZWxfc2Vx",
            "GAcgAygLMg0ucGJ4LlNlcVJhbmdlEhYKDnRhcmdldF91c2VyX2lkGAggASgJ",
            "EhUKDWFjdG9yX3VzZXJfaWQYCSABKAkSHAoDYWNzGAogASgLMg8ucGJ4LkFj",
            "Y2Vzc01vZGUidQoEV2hhdBIGCgJPThAAEgcKA09GRhABEgYKAlVBEAMSBwoD",
            "VVBEEAQSCAoER09ORRAFEgcKA0FDUxAGEggKBFRFUk0QBxIHCgNNU0cQCBII",
            "CgRSRUFEEAkSCAoEUkVDVhAKEgcKA0RFTBALEggKBFRBR1MQDCKrAQoKU2Vy",
            "dmVyTWV0YRIKCgJpZBgBIAEoCRINCgV0b3BpYxgCIAEoCRIcCgRkZXNjGAMg",
            "ASgLMg4ucGJ4LlRvcGljRGVzYxIaCgNzdWIYBCADKAsyDS5wYnguVG9waWNT",
            "dWISGwoDZGVsGAUgASgLMg4ucGJ4LkRlbFZhbHVlcxIMCgR0YWdzGAYgAygJ",
            "Eh0KBGNyZWQYByADKAsyDy5wYnguU2VydmVyQ3JlZCJeCgpTZXJ2ZXJJbmZv",
            "Eg0KBXRvcGljGAEgASgJEhQKDGZyb21fdXNlcl9pZBgCIAEoCRIbCgR3aGF0",
            "GAMgASgOMg0ucGJ4LkluZm9Ob3RlEg4KBnNlcV9pZBgEIAEoBSLKAQoJU2Vy",
            "dmVyTXNnEh8KBGN0cmwYASABKAsyDy5wYnguU2VydmVyQ3RybEgAEh8KBGRh",
            "dGEYAiABKAsyDy5wYnguU2VydmVyRGF0YUgAEh8KBHByZXMYAyABKAsyDy5w",
            "YnguU2VydmVyUHJlc0gAEh8KBG1ldGEYBCABKAsyDy5wYnguU2VydmVyTWV0",
            "YUgAEh8KBGluZm8YBSABKAsyDy5wYnguU2VydmVySW5mb0gAEg0KBXRvcGlj",
            "GAYgASgJQgkKB01lc3NhZ2UiagoKU2VydmVyUmVzcBIdCgZzdGF0dXMYASAB",
            "KA4yDS5wYnguUmVzcENvZGUSHgoGc3J2bXNnGAIgASgLMg4ucGJ4LlNlcnZl",
            "ck1zZxIdCgVjbG1zZxgDIAEoCzIOLnBieC5DbGllbnRNc2cioAEKB1Nlc3Np",
            "b24SEgoKc2Vzc2lvbl9pZBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJEiIKCmF1",
            "dGhfbGV2ZWwYAyABKA4yDi5wYnguQXV0aExldmVsEhMKC3JlbW90ZV9hZGRy",
            "GAQgASgJEhIKCnVzZXJfYWdlbnQYBSABKAkSEQoJZGV2aWNlX2lkGAYgASgJ",
            "EhAKCGxhbmd1YWdlGAcgASgJIkQKCUNsaWVudFJlcRIbCgNtc2cYASABKAsy",
            "Di5wYnguQ2xpZW50TXNnEhoKBHNlc3MYAiABKAsyDC5wYnguU2Vzc2lvbiIt",
            "CgtTZWFyY2hRdWVyeRIPCgd1c2VyX2lkGAEgASgJEg0KBXF1ZXJ5GAIgASgJ",
            "IloKC1NlYXJjaEZvdW5kEh0KBnN0YXR1cxgBIAEoDjINLnBieC5SZXNwQ29k",
            "ZRINCgVxdWVyeRgCIAEoCRIdCgZyZXN1bHQYAyADKAsyDS5wYnguVG9waWNT",
            "dWIiUwoKVG9waWNFdmVudBIZCgZhY3Rpb24YASABKA4yCS5wYnguQ3J1ZBIM",
            "CgRuYW1lGAIgASgJEhwKBGRlc2MYAyABKAsyDi5wYnguVG9waWNEZXNjIoIB",
            "CgxBY2NvdW50RXZlbnQSGQoGYWN0aW9uGAEgASgOMgkucGJ4LkNydWQSDwoH",
            "dXNlcl9pZBgCIAEoCRIoCgtkZWZhdWx0X2FjcxgDIAEoCzITLnBieC5EZWZh",
            "dWx0QWNzTW9kZRIOCgZwdWJsaWMYBCABKAwSDAoEdGFncxgIIAMoCSKwAQoR",
            "U3Vic2NyaXB0aW9uRXZlbnQSGQoGYWN0aW9uGAEgASgOMgkucGJ4LkNydWQS",
            "DQoFdG9waWMYAiABKAkSDwoHdXNlcl9pZBgDIAEoCRIOCgZkZWxfaWQYBCAB",
            "KAUSDwoHcmVhZF9pZBgFIAEoBRIPCgdyZWN2X2lkGAYgASgFEh0KBG1vZGUY",
            "ByABKAsyDy5wYnguQWNjZXNzTW9kZRIPCgdwcml2YXRlGAggASgMIkcKDE1l",
            "c3NhZ2VFdmVudBIZCgZhY3Rpb24YASABKA4yCS5wYnguQ3J1ZBIcCgNtc2cY",
            "AiABKAsyDy5wYnguU2VydmVyRGF0YSozCglBdXRoTGV2ZWwSCAoETk9ORRAA",
            "EggKBEFOT04QChIICgRBVVRIEBQSCAoEUk9PVBAeKiYKCEluZm9Ob3RlEggK",
            "BFJFQUQQABIICgRSRUNWEAESBgoCS1AQAio8CghSZXNwQ29kZRIMCghDT05U",
            "SU5VRRAAEggKBERST1AQARILCgdSRVNQT05EEAISCwoHUkVQTEFDRRADKioK",
            "BENydWQSCgoGQ1JFQVRFEAASCgoGVVBEQVRFEAESCgoGREVMRVRFEAIyOwoE",
            "Tm9kZRIzCgtNZXNzYWdlTG9vcBIOLnBieC5DbGllbnRNc2caDi5wYnguU2Vy",
            "dmVyTXNnIgAoATABMp8CCgZQbHVnaW4SLQoIRmlyZUhvc2USDi5wYnguQ2xp",
            "ZW50UmVxGg8ucGJ4LlNlcnZlclJlc3AiABIsCgRGaW5kEhAucGJ4LlNlYXJj",
            "aFF1ZXJ5GhAucGJ4LlNlYXJjaEZvdW5kIgASKwoHQWNjb3VudBIRLnBieC5B",
            "Y2NvdW50RXZlbnQaCy5wYnguVW51c2VkIgASJwoFVG9waWMSDy5wYnguVG9w",
            "aWNFdmVudBoLLnBieC5VbnVzZWQiABI1CgxTdWJzY3JpcHRpb24SFi5wYngu",
            "U3Vic2NyaXB0aW9uRXZlbnQaCy5wYnguVW51c2VkIgASKwoHTWVzc2FnZRIR",
            "LnBieC5NZXNzYWdlRXZlbnQaCy5wYnguVW51c2VkIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pbx.AuthLevel), typeof(global::Pbx.InfoNote), typeof(global::Pbx.RespCode), typeof(global::Pbx.Crud), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.Unused), global::Pbx.Unused.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.DefaultAcsMode), global::Pbx.DefaultAcsMode.Parser, new[]{ "Auth", "Anon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.AccessMode), global::Pbx.AccessMode.Parser, new[]{ "Want", "Given" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.SetSub), global::Pbx.SetSub.Parser, new[]{ "UserId", "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientCred), global::Pbx.ClientCred.Parser, new[]{ "Method", "Value", "Response", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.SetDesc), global::Pbx.SetDesc.Parser, new[]{ "DefaultAcs", "Public", "Private" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.GetOpts), global::Pbx.GetOpts.Parser, new[]{ "IfModifiedSince", "User", "Topic", "SinceId", "BeforeId", "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.GetQuery), global::Pbx.GetQuery.Parser, new[]{ "What", "Desc", "Sub", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.SetQuery), global::Pbx.SetQuery.Parser, new[]{ "Desc", "Sub", "Tags", "Cred" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.SeqRange), global::Pbx.SeqRange.Parser, new[]{ "Low", "Hi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientHi), global::Pbx.ClientHi.Parser, new[]{ "Id", "UserAgent", "Ver", "DeviceId", "Lang", "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientAcc), global::Pbx.ClientAcc.Parser, new[]{ "Id", "UserId", "Scheme", "Secret", "Login", "Tags", "Desc", "Cred", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientLogin), global::Pbx.ClientLogin.Parser, new[]{ "Id", "Scheme", "Secret", "Cred" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientSub), global::Pbx.ClientSub.Parser, new[]{ "Id", "Topic", "SetQuery", "GetQuery" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientLeave), global::Pbx.ClientLeave.Parser, new[]{ "Id", "Topic", "Unsub" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientPub), global::Pbx.ClientPub.Parser, new[]{ "Id", "Topic", "NoEcho", "Head", "Content" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientGet), global::Pbx.ClientGet.Parser, new[]{ "Id", "Topic", "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientSet), global::Pbx.ClientSet.Parser, new[]{ "Id", "Topic", "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientDel), global::Pbx.ClientDel.Parser, new[]{ "Id", "Topic", "What", "DelSeq", "UserId", "Cred", "Hard" }, null, new[]{ typeof(global::Pbx.ClientDel.Types.What) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientNote), global::Pbx.ClientNote.Parser, new[]{ "Topic", "What", "SeqId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientMsg), global::Pbx.ClientMsg.Parser, new[]{ "Hi", "Acc", "Login", "Sub", "Leave", "Pub", "Get", "Set", "Del", "Note", "OnBehalfOf", "AuthLevel" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerCred), global::Pbx.ServerCred.Parser, new[]{ "Method", "Value", "Done" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.TopicDesc), global::Pbx.TopicDesc.Parser, new[]{ "CreatedAt", "UpdatedAt", "TouchedAt", "Defacs", "Acs", "SeqId", "ReadId", "RecvId", "DelId", "Public", "Private" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.TopicSub), global::Pbx.TopicSub.Parser, new[]{ "UpdatedAt", "DeletedAt", "Online", "Acs", "ReadId", "RecvId", "Public", "Private", "UserId", "Topic", "TouchedAt", "SeqId", "DelId", "LastSeenTime", "LastSeenUserAgent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.DelValues), global::Pbx.DelValues.Parser, new[]{ "DelId", "DelSeq" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerCtrl), global::Pbx.ServerCtrl.Parser, new[]{ "Id", "Topic", "Code", "Text", "Params" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerData), global::Pbx.ServerData.Parser, new[]{ "Topic", "FromUserId", "Timestamp", "DeletedAt", "SeqId", "Head", "Content" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerPres), global::Pbx.ServerPres.Parser, new[]{ "Topic", "Src", "What", "UserAgent", "SeqId", "DelId", "DelSeq", "TargetUserId", "ActorUserId", "Acs" }, null, new[]{ typeof(global::Pbx.ServerPres.Types.What) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerMeta), global::Pbx.ServerMeta.Parser, new[]{ "Id", "Topic", "Desc", "Sub", "Del", "Tags", "Cred" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerInfo), global::Pbx.ServerInfo.Parser, new[]{ "Topic", "FromUserId", "What", "SeqId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerMsg), global::Pbx.ServerMsg.Parser, new[]{ "Ctrl", "Data", "Pres", "Meta", "Info", "Topic" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ServerResp), global::Pbx.ServerResp.Parser, new[]{ "Status", "Srvmsg", "Clmsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.Session), global::Pbx.Session.Parser, new[]{ "SessionId", "UserId", "AuthLevel", "RemoteAddr", "UserAgent", "DeviceId", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.ClientReq), global::Pbx.ClientReq.Parser, new[]{ "Msg", "Sess" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.SearchQuery), global::Pbx.SearchQuery.Parser, new[]{ "UserId", "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.SearchFound), global::Pbx.SearchFound.Parser, new[]{ "Status", "Query", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.TopicEvent), global::Pbx.TopicEvent.Parser, new[]{ "Action", "Name", "Desc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.AccountEvent), global::Pbx.AccountEvent.Parser, new[]{ "Action", "UserId", "DefaultAcs", "Public", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.SubscriptionEvent), global::Pbx.SubscriptionEvent.Parser, new[]{ "Action", "Topic", "UserId", "DelId", "ReadId", "RecvId", "Mode", "Private" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbx.MessageEvent), global::Pbx.MessageEvent.Parser, new[]{ "Action", "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Authentication level
  /// </summary>
  public enum AuthLevel {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("ANON")] Anon = 10,
    [pbr::OriginalName("AUTH")] Auth = 20,
    [pbr::OriginalName("ROOT")] Root = 30,
  }

  public enum InfoNote {
    [pbr::OriginalName("READ")] Read = 0,
    [pbr::OriginalName("RECV")] Recv = 1,
    [pbr::OriginalName("KP")] Kp = 2,
  }

  /// <summary>
  /// Plugin response codes
  /// </summary>
  public enum RespCode {
    /// <summary>
    /// Instruct Tinode server to continue with default processing of the client request.
    /// </summary>
    [pbr::OriginalName("CONTINUE")] Continue = 0,
    /// <summary>
    /// Drop the request as if the client did not send it
    /// </summary>
    [pbr::OriginalName("DROP")] Drop = 1,
    /// <summary>
    /// Send the the provided response to the client.
    /// </summary>
    [pbr::OriginalName("RESPOND")] Respond = 2,
    /// <summary>
    /// Replace client's original request with the provided request then continue with
    /// processing.
    /// </summary>
    [pbr::OriginalName("REPLACE")] Replace = 3,
  }

  public enum Crud {
    [pbr::OriginalName("CREATE")] Create = 0,
    [pbr::OriginalName("UPDATE")] Update = 1,
    [pbr::OriginalName("DELETE")] Delete = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Dummy placeholder message.
  /// </summary>
  public sealed partial class Unused : pb::IMessage<Unused> {
    private static readonly pb::MessageParser<Unused> _parser = new pb::MessageParser<Unused>(() => new Unused());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unused> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unused() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unused(Unused other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unused Clone() {
      return new Unused(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unused);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unused other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unused other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Topic default access mode
  /// </summary>
  public sealed partial class DefaultAcsMode : pb::IMessage<DefaultAcsMode> {
    private static readonly pb::MessageParser<DefaultAcsMode> _parser = new pb::MessageParser<DefaultAcsMode>(() => new DefaultAcsMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefaultAcsMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultAcsMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultAcsMode(DefaultAcsMode other) : this() {
      auth_ = other.auth_;
      anon_ = other.anon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefaultAcsMode Clone() {
      return new DefaultAcsMode(this);
    }

    /// <summary>Field number for the "auth" field.</summary>
    public const int AuthFieldNumber = 1;
    private string auth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Auth {
      get { return auth_; }
      set {
        auth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anon" field.</summary>
    public const int AnonFieldNumber = 2;
    private string anon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Anon {
      get { return anon_; }
      set {
        anon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefaultAcsMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefaultAcsMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auth != other.Auth) return false;
      if (Anon != other.Anon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auth.Length != 0) hash ^= Auth.GetHashCode();
      if (Anon.Length != 0) hash ^= Anon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Auth.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Auth);
      }
      if (Anon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Anon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Auth);
      }
      if (Anon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Anon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefaultAcsMode other) {
      if (other == null) {
        return;
      }
      if (other.Auth.Length != 0) {
        Auth = other.Auth;
      }
      if (other.Anon.Length != 0) {
        Anon = other.Anon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Auth = input.ReadString();
            break;
          }
          case 18: {
            Anon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Actual access mode
  /// </summary>
  public sealed partial class AccessMode : pb::IMessage<AccessMode> {
    private static readonly pb::MessageParser<AccessMode> _parser = new pb::MessageParser<AccessMode>(() => new AccessMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessMode(AccessMode other) : this() {
      want_ = other.want_;
      given_ = other.given_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessMode Clone() {
      return new AccessMode(this);
    }

    /// <summary>Field number for the "want" field.</summary>
    public const int WantFieldNumber = 1;
    private string want_ = "";
    /// <summary>
    /// Access mode requested by the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Want {
      get { return want_; }
      set {
        want_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "given" field.</summary>
    public const int GivenFieldNumber = 2;
    private string given_ = "";
    /// <summary>
    /// Access mode granted to the user by the admin
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Given {
      get { return given_; }
      set {
        given_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Want != other.Want) return false;
      if (Given != other.Given) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Want.Length != 0) hash ^= Want.GetHashCode();
      if (Given.Length != 0) hash ^= Given.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Want.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Want);
      }
      if (Given.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Given);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Want.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Want);
      }
      if (Given.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Given);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessMode other) {
      if (other == null) {
        return;
      }
      if (other.Want.Length != 0) {
        Want = other.Want;
      }
      if (other.Given.Length != 0) {
        Given = other.Given;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Want = input.ReadString();
            break;
          }
          case 18: {
            Given = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SetSub: payload in set.sub request to update current subscription or invite another user, {sub.what} == "sub"
  /// </summary>
  public sealed partial class SetSub : pb::IMessage<SetSub> {
    private static readonly pb::MessageParser<SetSub> _parser = new pb::MessageParser<SetSub>(() => new SetSub());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetSub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSub(SetSub other) : this() {
      userId_ = other.userId_;
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetSub Clone() {
      return new SetSub(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// User affected by this request. Default (empty): current user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private string mode_ = "";
    /// <summary>
    /// Access mode change, either Given or Want depending on context
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetSub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetSub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Mode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetSub other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Mode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Credentials such as email or phone number
  /// </summary>
  public sealed partial class ClientCred : pb::IMessage<ClientCred> {
    private static readonly pb::MessageParser<ClientCred> _parser = new pb::MessageParser<ClientCred>(() => new ClientCred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientCred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientCred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientCred(ClientCred other) : this() {
      method_ = other.method_;
      value_ = other.value_;
      response_ = other.response_;
      params_ = other.params_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientCred Clone() {
      return new ClientCred(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    /// <summary>
    /// Credential type, i.e. `email` or `tel`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Value to verify, i.e. `user@example.com` or `+18003287448`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 3;
    private string response_ = "";
    /// <summary>
    /// Verification response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private pb::ByteString params_ = pb::ByteString.Empty;
    /// <summary>
    /// Request parameters, such as preferences.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientCred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientCred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Value != other.Value) return false;
      if (Response != other.Response) return false;
      if (Params != other.Params) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Response.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Response);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientCred other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            Response = input.ReadString();
            break;
          }
          case 34: {
            Params = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SetDesc: C2S in set.what == "desc" and sub.init message
  /// </summary>
  public sealed partial class SetDesc : pb::IMessage<SetDesc> {
    private static readonly pb::MessageParser<SetDesc> _parser = new pb::MessageParser<SetDesc>(() => new SetDesc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDesc(SetDesc other) : this() {
      defaultAcs_ = other.defaultAcs_ != null ? other.defaultAcs_.Clone() : null;
      public_ = other.public_;
      private_ = other.private_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDesc Clone() {
      return new SetDesc(this);
    }

    /// <summary>Field number for the "default_acs" field.</summary>
    public const int DefaultAcsFieldNumber = 1;
    private global::Pbx.DefaultAcsMode defaultAcs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.DefaultAcsMode DefaultAcs {
      get { return defaultAcs_; }
      set {
        defaultAcs_ = value;
      }
    }

    /// <summary>Field number for the "public" field.</summary>
    public const int PublicFieldNumber = 2;
    private pb::ByteString public_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Public {
      get { return public_; }
      set {
        public_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 3;
    private pb::ByteString private_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Private {
      get { return private_; }
      set {
        private_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DefaultAcs, other.DefaultAcs)) return false;
      if (Public != other.Public) return false;
      if (Private != other.Private) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (defaultAcs_ != null) hash ^= DefaultAcs.GetHashCode();
      if (Public.Length != 0) hash ^= Public.GetHashCode();
      if (Private.Length != 0) hash ^= Private.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (defaultAcs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DefaultAcs);
      }
      if (Public.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Public);
      }
      if (Private.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Private);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (defaultAcs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultAcs);
      }
      if (Public.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Public);
      }
      if (Private.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Private);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDesc other) {
      if (other == null) {
        return;
      }
      if (other.defaultAcs_ != null) {
        if (defaultAcs_ == null) {
          defaultAcs_ = new global::Pbx.DefaultAcsMode();
        }
        DefaultAcs.MergeFrom(other.DefaultAcs);
      }
      if (other.Public.Length != 0) {
        Public = other.Public;
      }
      if (other.Private.Length != 0) {
        Private = other.Private;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (defaultAcs_ == null) {
              defaultAcs_ = new global::Pbx.DefaultAcsMode();
            }
            input.ReadMessage(defaultAcs_);
            break;
          }
          case 18: {
            Public = input.ReadBytes();
            break;
          }
          case 26: {
            Private = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOpts : pb::IMessage<GetOpts> {
    private static readonly pb::MessageParser<GetOpts> _parser = new pb::MessageParser<GetOpts>(() => new GetOpts());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpts(GetOpts other) : this() {
      ifModifiedSince_ = other.ifModifiedSince_;
      user_ = other.user_;
      topic_ = other.topic_;
      sinceId_ = other.sinceId_;
      beforeId_ = other.beforeId_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOpts Clone() {
      return new GetOpts(this);
    }

    /// <summary>Field number for the "if_modified_since" field.</summary>
    public const int IfModifiedSinceFieldNumber = 1;
    private long ifModifiedSince_;
    /// <summary>
    /// Timestamp in milliseconds since epoch 01/01/1970
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IfModifiedSince {
      get { return ifModifiedSince_; }
      set {
        ifModifiedSince_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private string user_ = "";
    /// <summary>
    /// Limit search to this user ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 3;
    private string topic_ = "";
    /// <summary>
    /// Limit search results to one topic;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "since_id" field.</summary>
    public const int SinceIdFieldNumber = 4;
    private int sinceId_;
    /// <summary>
    /// Load messages with seq id equal or greater than this
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SinceId {
      get { return sinceId_; }
      set {
        sinceId_ = value;
      }
    }

    /// <summary>Field number for the "before_id" field.</summary>
    public const int BeforeIdFieldNumber = 5;
    private int beforeId_;
    /// <summary>
    /// Load messages with seq id lower than this
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeforeId {
      get { return beforeId_; }
      set {
        beforeId_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private int limit_;
    /// <summary>
    /// Maximum number of results to return
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IfModifiedSince != other.IfModifiedSince) return false;
      if (User != other.User) return false;
      if (Topic != other.Topic) return false;
      if (SinceId != other.SinceId) return false;
      if (BeforeId != other.BeforeId) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IfModifiedSince != 0L) hash ^= IfModifiedSince.GetHashCode();
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (SinceId != 0) hash ^= SinceId.GetHashCode();
      if (BeforeId != 0) hash ^= BeforeId.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IfModifiedSince != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(IfModifiedSince);
      }
      if (User.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(User);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Topic);
      }
      if (SinceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SinceId);
      }
      if (BeforeId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BeforeId);
      }
      if (Limit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IfModifiedSince != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IfModifiedSince);
      }
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (SinceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SinceId);
      }
      if (BeforeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeforeId);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOpts other) {
      if (other == null) {
        return;
      }
      if (other.IfModifiedSince != 0L) {
        IfModifiedSince = other.IfModifiedSince;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.SinceId != 0) {
        SinceId = other.SinceId;
      }
      if (other.BeforeId != 0) {
        BeforeId = other.BeforeId;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IfModifiedSince = input.ReadInt64();
            break;
          }
          case 18: {
            User = input.ReadString();
            break;
          }
          case 26: {
            Topic = input.ReadString();
            break;
          }
          case 32: {
            SinceId = input.ReadInt32();
            break;
          }
          case 40: {
            BeforeId = input.ReadInt32();
            break;
          }
          case 48: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetQuery : pb::IMessage<GetQuery> {
    private static readonly pb::MessageParser<GetQuery> _parser = new pb::MessageParser<GetQuery>(() => new GetQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuery(GetQuery other) : this() {
      what_ = other.what_;
      desc_ = other.desc_ != null ? other.desc_.Clone() : null;
      sub_ = other.sub_ != null ? other.sub_.Clone() : null;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetQuery Clone() {
      return new GetQuery(this);
    }

    /// <summary>Field number for the "what" field.</summary>
    public const int WhatFieldNumber = 1;
    private string what_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string What {
      get { return what_; }
      set {
        what_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private global::Pbx.GetOpts desc_;
    /// <summary>
    /// Parameters of "desc" request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.GetOpts Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 3;
    private global::Pbx.GetOpts sub_;
    /// <summary>
    /// Parameters of "sub" request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.GetOpts Sub {
      get { return sub_; }
      set {
        sub_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private global::Pbx.GetOpts data_;
    /// <summary>
    /// Parameters of "data" request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.GetOpts Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (What != other.What) return false;
      if (!object.Equals(Desc, other.Desc)) return false;
      if (!object.Equals(Sub, other.Sub)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (What.Length != 0) hash ^= What.GetHashCode();
      if (desc_ != null) hash ^= Desc.GetHashCode();
      if (sub_ != null) hash ^= Sub.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (What.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(What);
      }
      if (desc_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Desc);
      }
      if (sub_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Sub);
      }
      if (data_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (What.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(What);
      }
      if (desc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
      }
      if (sub_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sub);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetQuery other) {
      if (other == null) {
        return;
      }
      if (other.What.Length != 0) {
        What = other.What;
      }
      if (other.desc_ != null) {
        if (desc_ == null) {
          desc_ = new global::Pbx.GetOpts();
        }
        Desc.MergeFrom(other.Desc);
      }
      if (other.sub_ != null) {
        if (sub_ == null) {
          sub_ = new global::Pbx.GetOpts();
        }
        Sub.MergeFrom(other.Sub);
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Pbx.GetOpts();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            What = input.ReadString();
            break;
          }
          case 18: {
            if (desc_ == null) {
              desc_ = new global::Pbx.GetOpts();
            }
            input.ReadMessage(desc_);
            break;
          }
          case 26: {
            if (sub_ == null) {
              sub_ = new global::Pbx.GetOpts();
            }
            input.ReadMessage(sub_);
            break;
          }
          case 34: {
            if (data_ == null) {
              data_ = new global::Pbx.GetOpts();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetQuery : pb::IMessage<SetQuery> {
    private static readonly pb::MessageParser<SetQuery> _parser = new pb::MessageParser<SetQuery>(() => new SetQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetQuery(SetQuery other) : this() {
      desc_ = other.desc_ != null ? other.desc_.Clone() : null;
      sub_ = other.sub_ != null ? other.sub_.Clone() : null;
      tags_ = other.tags_.Clone();
      cred_ = other.cred_ != null ? other.cred_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetQuery Clone() {
      return new SetQuery(this);
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 1;
    private global::Pbx.SetDesc desc_;
    /// <summary>
    /// Topic metadata, new topic &amp; new subscriptions only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.SetDesc Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 2;
    private global::Pbx.SetSub sub_;
    /// <summary>
    /// Subscription parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.SetSub Sub {
      get { return sub_; }
      set {
        sub_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Indexable tags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "cred" field.</summary>
    public const int CredFieldNumber = 4;
    private global::Pbx.ClientCred cred_;
    /// <summary>
    /// Credential being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientCred Cred {
      get { return cred_; }
      set {
        cred_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Desc, other.Desc)) return false;
      if (!object.Equals(Sub, other.Sub)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!object.Equals(Cred, other.Cred)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (desc_ != null) hash ^= Desc.GetHashCode();
      if (sub_ != null) hash ^= Sub.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (cred_ != null) hash ^= Cred.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (desc_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Desc);
      }
      if (sub_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sub);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (cred_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Cred);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (desc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
      }
      if (sub_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sub);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (cred_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cred);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetQuery other) {
      if (other == null) {
        return;
      }
      if (other.desc_ != null) {
        if (desc_ == null) {
          desc_ = new global::Pbx.SetDesc();
        }
        Desc.MergeFrom(other.Desc);
      }
      if (other.sub_ != null) {
        if (sub_ == null) {
          sub_ = new global::Pbx.SetSub();
        }
        Sub.MergeFrom(other.Sub);
      }
      tags_.Add(other.tags_);
      if (other.cred_ != null) {
        if (cred_ == null) {
          cred_ = new global::Pbx.ClientCred();
        }
        Cred.MergeFrom(other.Cred);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (desc_ == null) {
              desc_ = new global::Pbx.SetDesc();
            }
            input.ReadMessage(desc_);
            break;
          }
          case 18: {
            if (sub_ == null) {
              sub_ = new global::Pbx.SetSub();
            }
            input.ReadMessage(sub_);
            break;
          }
          case 26: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 34: {
            if (cred_ == null) {
              cred_ = new global::Pbx.ClientCred();
            }
            input.ReadMessage(cred_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SeqRange : pb::IMessage<SeqRange> {
    private static readonly pb::MessageParser<SeqRange> _parser = new pb::MessageParser<SeqRange>(() => new SeqRange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeqRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeqRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeqRange(SeqRange other) : this() {
      low_ = other.low_;
      hi_ = other.hi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeqRange Clone() {
      return new SeqRange(this);
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 1;
    private int low_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "hi" field.</summary>
    public const int HiFieldNumber = 2;
    private int hi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hi {
      get { return hi_; }
      set {
        hi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeqRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeqRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Low != other.Low) return false;
      if (Hi != other.Hi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Low != 0) hash ^= Low.GetHashCode();
      if (Hi != 0) hash ^= Hi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Low != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Low);
      }
      if (Hi != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Low != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Low);
      }
      if (Hi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeqRange other) {
      if (other == null) {
        return;
      }
      if (other.Low != 0) {
        Low = other.Low;
      }
      if (other.Hi != 0) {
        Hi = other.Hi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Low = input.ReadInt32();
            break;
          }
          case 16: {
            Hi = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Client handshake
  /// </summary>
  public sealed partial class ClientHi : pb::IMessage<ClientHi> {
    private static readonly pb::MessageParser<ClientHi> _parser = new pb::MessageParser<ClientHi>(() => new ClientHi());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientHi> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHi() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHi(ClientHi other) : this() {
      id_ = other.id_;
      userAgent_ = other.userAgent_;
      ver_ = other.ver_;
      deviceId_ = other.deviceId_;
      lang_ = other.lang_;
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHi Clone() {
      return new ClientHi(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 2;
    private string userAgent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 3;
    private string ver_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ver {
      get { return ver_; }
      set {
        ver_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 4;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 5;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 6;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientHi);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientHi other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserAgent != other.UserAgent) return false;
      if (Ver != other.Ver) return false;
      if (DeviceId != other.DeviceId) return false;
      if (Lang != other.Lang) return false;
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (Ver.Length != 0) hash ^= Ver.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserAgent);
      }
      if (Ver.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ver);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceId);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Lang);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (Ver.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ver);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientHi other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.Ver.Length != 0) {
        Ver = other.Ver;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserAgent = input.ReadString();
            break;
          }
          case 26: {
            Ver = input.ReadString();
            break;
          }
          case 34: {
            DeviceId = input.ReadString();
            break;
          }
          case 42: {
            Lang = input.ReadString();
            break;
          }
          case 50: {
            Platform = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// User creation message {acc}
  /// </summary>
  public sealed partial class ClientAcc : pb::IMessage<ClientAcc> {
    private static readonly pb::MessageParser<ClientAcc> _parser = new pb::MessageParser<ClientAcc>(() => new ClientAcc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientAcc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientAcc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientAcc(ClientAcc other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      scheme_ = other.scheme_;
      secret_ = other.secret_;
      login_ = other.login_;
      tags_ = other.tags_.Clone();
      desc_ = other.desc_ != null ? other.desc_.Clone() : null;
      cred_ = other.cred_.Clone();
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientAcc Clone() {
      return new ClientAcc(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    /// <summary>
    /// User being created or updated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheme" field.</summary>
    public const int SchemeFieldNumber = 3;
    private string scheme_ = "";
    /// <summary>
    /// The initial authentication scheme the account can use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scheme {
      get { return scheme_; }
      set {
        scheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 4;
    private pb::ByteString secret_ = pb::ByteString.Empty;
    /// <summary>
    /// Shared secret
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login" field.</summary>
    public const int LoginFieldNumber = 5;
    private bool login_;
    /// <summary>
    /// Authenticate session with the newly created account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Login {
      get { return login_; }
      set {
        login_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Indexable tags for user discovery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 7;
    private global::Pbx.SetDesc desc_;
    /// <summary>
    /// User initialization data when creating a new user, otherwise ignored
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.SetDesc Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    /// <summary>Field number for the "cred" field.</summary>
    public const int CredFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Pbx.ClientCred> _repeated_cred_codec
        = pb::FieldCodec.ForMessage(66, global::Pbx.ClientCred.Parser);
    private readonly pbc::RepeatedField<global::Pbx.ClientCred> cred_ = new pbc::RepeatedField<global::Pbx.ClientCred>();
    /// <summary>
    /// Credentials for verification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.ClientCred> Cred {
      get { return cred_; }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 9;
    private pb::ByteString token_ = pb::ByteString.Empty;
    /// <summary>
    /// Authentication token used for resetting a password.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientAcc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientAcc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (Scheme != other.Scheme) return false;
      if (Secret != other.Secret) return false;
      if (Login != other.Login) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (!object.Equals(Desc, other.Desc)) return false;
      if(!cred_.Equals(other.cred_)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Scheme.Length != 0) hash ^= Scheme.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      if (Login != false) hash ^= Login.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (desc_ != null) hash ^= Desc.GetHashCode();
      hash ^= cred_.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (Scheme.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Scheme);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Secret);
      }
      if (Login != false) {
        output.WriteRawTag(40);
        output.WriteBool(Login);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (desc_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Desc);
      }
      cred_.WriteTo(output, _repeated_cred_codec);
      if (Token.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Scheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scheme);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Secret);
      }
      if (Login != false) {
        size += 1 + 1;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (desc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
      }
      size += cred_.CalculateSize(_repeated_cred_codec);
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientAcc other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Scheme.Length != 0) {
        Scheme = other.Scheme;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      if (other.Login != false) {
        Login = other.Login;
      }
      tags_.Add(other.tags_);
      if (other.desc_ != null) {
        if (desc_ == null) {
          desc_ = new global::Pbx.SetDesc();
        }
        Desc.MergeFrom(other.Desc);
      }
      cred_.Add(other.cred_);
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            Scheme = input.ReadString();
            break;
          }
          case 34: {
            Secret = input.ReadBytes();
            break;
          }
          case 40: {
            Login = input.ReadBool();
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 58: {
            if (desc_ == null) {
              desc_ = new global::Pbx.SetDesc();
            }
            input.ReadMessage(desc_);
            break;
          }
          case 66: {
            cred_.AddEntriesFrom(input, _repeated_cred_codec);
            break;
          }
          case 74: {
            Token = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Login {login} message
  /// </summary>
  public sealed partial class ClientLogin : pb::IMessage<ClientLogin> {
    private static readonly pb::MessageParser<ClientLogin> _parser = new pb::MessageParser<ClientLogin>(() => new ClientLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLogin(ClientLogin other) : this() {
      id_ = other.id_;
      scheme_ = other.scheme_;
      secret_ = other.secret_;
      cred_ = other.cred_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLogin Clone() {
      return new ClientLogin(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheme" field.</summary>
    public const int SchemeFieldNumber = 2;
    private string scheme_ = "";
    /// <summary>
    /// Authentication scheme
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scheme {
      get { return scheme_; }
      set {
        scheme_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 3;
    private pb::ByteString secret_ = pb::ByteString.Empty;
    /// <summary>
    /// Shared secret
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cred" field.</summary>
    public const int CredFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbx.ClientCred> _repeated_cred_codec
        = pb::FieldCodec.ForMessage(34, global::Pbx.ClientCred.Parser);
    private readonly pbc::RepeatedField<global::Pbx.ClientCred> cred_ = new pbc::RepeatedField<global::Pbx.ClientCred>();
    /// <summary>
    /// Credentials for verification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.ClientCred> Cred {
      get { return cred_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Scheme != other.Scheme) return false;
      if (Secret != other.Secret) return false;
      if(!cred_.Equals(other.cred_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Scheme.Length != 0) hash ^= Scheme.GetHashCode();
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      hash ^= cred_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Scheme.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Scheme);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Secret);
      }
      cred_.WriteTo(output, _repeated_cred_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Scheme.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scheme);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Secret);
      }
      size += cred_.CalculateSize(_repeated_cred_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientLogin other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Scheme.Length != 0) {
        Scheme = other.Scheme;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      cred_.Add(other.cred_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Scheme = input.ReadString();
            break;
          }
          case 26: {
            Secret = input.ReadBytes();
            break;
          }
          case 34: {
            cred_.AddEntriesFrom(input, _repeated_cred_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Subscription request {sub} message
  /// </summary>
  public sealed partial class ClientSub : pb::IMessage<ClientSub> {
    private static readonly pb::MessageParser<ClientSub> _parser = new pb::MessageParser<ClientSub>(() => new ClientSub());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSub(ClientSub other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      setQuery_ = other.setQuery_ != null ? other.setQuery_.Clone() : null;
      getQuery_ = other.getQuery_ != null ? other.getQuery_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSub Clone() {
      return new ClientSub(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "set_query" field.</summary>
    public const int SetQueryFieldNumber = 3;
    private global::Pbx.SetQuery setQuery_;
    /// <summary>
    /// mirrors {set}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.SetQuery SetQuery {
      get { return setQuery_; }
      set {
        setQuery_ = value;
      }
    }

    /// <summary>Field number for the "get_query" field.</summary>
    public const int GetQueryFieldNumber = 4;
    private global::Pbx.GetQuery getQuery_;
    /// <summary>
    /// mirrors {get}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.GetQuery GetQuery {
      get { return getQuery_; }
      set {
        getQuery_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (!object.Equals(SetQuery, other.SetQuery)) return false;
      if (!object.Equals(GetQuery, other.GetQuery)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (setQuery_ != null) hash ^= SetQuery.GetHashCode();
      if (getQuery_ != null) hash ^= GetQuery.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (setQuery_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SetQuery);
      }
      if (getQuery_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GetQuery);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (setQuery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetQuery);
      }
      if (getQuery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetQuery);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSub other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.setQuery_ != null) {
        if (setQuery_ == null) {
          setQuery_ = new global::Pbx.SetQuery();
        }
        SetQuery.MergeFrom(other.SetQuery);
      }
      if (other.getQuery_ != null) {
        if (getQuery_ == null) {
          getQuery_ = new global::Pbx.GetQuery();
        }
        GetQuery.MergeFrom(other.GetQuery);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            if (setQuery_ == null) {
              setQuery_ = new global::Pbx.SetQuery();
            }
            input.ReadMessage(setQuery_);
            break;
          }
          case 34: {
            if (getQuery_ == null) {
              getQuery_ = new global::Pbx.GetQuery();
            }
            input.ReadMessage(getQuery_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Unsubscribe {leave} request message
  /// </summary>
  public sealed partial class ClientLeave : pb::IMessage<ClientLeave> {
    private static readonly pb::MessageParser<ClientLeave> _parser = new pb::MessageParser<ClientLeave>(() => new ClientLeave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLeave(ClientLeave other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      unsub_ = other.unsub_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientLeave Clone() {
      return new ClientLeave(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unsub" field.</summary>
    public const int UnsubFieldNumber = 3;
    private bool unsub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unsub {
      get { return unsub_; }
      set {
        unsub_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (Unsub != other.Unsub) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (Unsub != false) hash ^= Unsub.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (Unsub != false) {
        output.WriteRawTag(24);
        output.WriteBool(Unsub);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (Unsub != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientLeave other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.Unsub != false) {
        Unsub = other.Unsub;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 24: {
            Unsub = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ClientPub is client's request to publish data to topic subscribers {pub}
  /// </summary>
  public sealed partial class ClientPub : pb::IMessage<ClientPub> {
    private static readonly pb::MessageParser<ClientPub> _parser = new pb::MessageParser<ClientPub>(() => new ClientPub());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientPub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientPub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientPub(ClientPub other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      noEcho_ = other.noEcho_;
      head_ = other.head_.Clone();
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientPub Clone() {
      return new ClientPub(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "no_echo" field.</summary>
    public const int NoEchoFieldNumber = 3;
    private bool noEcho_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoEcho {
      get { return noEcho_; }
      set {
        noEcho_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 4;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_head_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 34);
    private readonly pbc::MapField<string, pb::ByteString> head_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> Head {
      get { return head_; }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 5;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientPub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientPub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (NoEcho != other.NoEcho) return false;
      if (!Head.Equals(other.Head)) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (NoEcho != false) hash ^= NoEcho.GetHashCode();
      hash ^= Head.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (NoEcho != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoEcho);
      }
      head_.WriteTo(output, _map_head_codec);
      if (Content.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (NoEcho != false) {
        size += 1 + 1;
      }
      size += head_.CalculateSize(_map_head_codec);
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientPub other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.NoEcho != false) {
        NoEcho = other.NoEcho;
      }
      head_.Add(other.head_);
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 24: {
            NoEcho = input.ReadBool();
            break;
          }
          case 34: {
            head_.AddEntriesFrom(input, _map_head_codec);
            break;
          }
          case 42: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Query topic state {get}
  /// </summary>
  public sealed partial class ClientGet : pb::IMessage<ClientGet> {
    private static readonly pb::MessageParser<ClientGet> _parser = new pb::MessageParser<ClientGet>(() => new ClientGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGet(ClientGet other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      query_ = other.query_ != null ? other.query_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientGet Clone() {
      return new ClientGet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 3;
    private global::Pbx.GetQuery query_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.GetQuery Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (!object.Equals(Query, other.Query)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (query_ != null) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (query_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientGet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.query_ != null) {
        if (query_ == null) {
          query_ = new global::Pbx.GetQuery();
        }
        Query.MergeFrom(other.Query);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            if (query_ == null) {
              query_ = new global::Pbx.GetQuery();
            }
            input.ReadMessage(query_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Update topic state {set}
  /// </summary>
  public sealed partial class ClientSet : pb::IMessage<ClientSet> {
    private static readonly pb::MessageParser<ClientSet> _parser = new pb::MessageParser<ClientSet>(() => new ClientSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSet(ClientSet other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      query_ = other.query_ != null ? other.query_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientSet Clone() {
      return new ClientSet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 3;
    private global::Pbx.SetQuery query_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.SetQuery Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (!object.Equals(Query, other.Query)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (query_ != null) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (query_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientSet other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.query_ != null) {
        if (query_ == null) {
          query_ = new global::Pbx.SetQuery();
        }
        Query.MergeFrom(other.Query);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            if (query_ == null) {
              query_ = new global::Pbx.SetQuery();
            }
            input.ReadMessage(query_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ClientDel delete messages or topic
  /// </summary>
  public sealed partial class ClientDel : pb::IMessage<ClientDel> {
    private static readonly pb::MessageParser<ClientDel> _parser = new pb::MessageParser<ClientDel>(() => new ClientDel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientDel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientDel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientDel(ClientDel other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      what_ = other.what_;
      delSeq_ = other.delSeq_.Clone();
      userId_ = other.userId_;
      cred_ = other.cred_ != null ? other.cred_.Clone() : null;
      hard_ = other.hard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientDel Clone() {
      return new ClientDel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "what" field.</summary>
    public const int WhatFieldNumber = 3;
    private global::Pbx.ClientDel.Types.What what_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientDel.Types.What What {
      get { return what_; }
      set {
        what_ = value;
      }
    }

    /// <summary>Field number for the "del_seq" field.</summary>
    public const int DelSeqFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbx.SeqRange> _repeated_delSeq_codec
        = pb::FieldCodec.ForMessage(34, global::Pbx.SeqRange.Parser);
    private readonly pbc::RepeatedField<global::Pbx.SeqRange> delSeq_ = new pbc::RepeatedField<global::Pbx.SeqRange>();
    /// <summary>
    /// Delete messages by id or range of ids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.SeqRange> DelSeq {
      get { return delSeq_; }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private string userId_ = "";
    /// <summary>
    /// User ID of the subscription to delete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cred" field.</summary>
    public const int CredFieldNumber = 6;
    private global::Pbx.ClientCred cred_;
    /// <summary>
    /// Credential to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientCred Cred {
      get { return cred_; }
      set {
        cred_ = value;
      }
    }

    /// <summary>Field number for the "hard" field.</summary>
    public const int HardFieldNumber = 7;
    private bool hard_;
    /// <summary>
    /// Request to hard-delete messages for all users, if such option is available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hard {
      get { return hard_; }
      set {
        hard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientDel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientDel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (What != other.What) return false;
      if(!delSeq_.Equals(other.delSeq_)) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(Cred, other.Cred)) return false;
      if (Hard != other.Hard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (What != 0) hash ^= What.GetHashCode();
      hash ^= delSeq_.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (cred_ != null) hash ^= Cred.GetHashCode();
      if (Hard != false) hash ^= Hard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (What != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) What);
      }
      delSeq_.WriteTo(output, _repeated_delSeq_codec);
      if (UserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserId);
      }
      if (cred_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Cred);
      }
      if (Hard != false) {
        output.WriteRawTag(56);
        output.WriteBool(Hard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (What != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) What);
      }
      size += delSeq_.CalculateSize(_repeated_delSeq_codec);
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (cred_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cred);
      }
      if (Hard != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientDel other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.What != 0) {
        What = other.What;
      }
      delSeq_.Add(other.delSeq_);
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.cred_ != null) {
        if (cred_ == null) {
          cred_ = new global::Pbx.ClientCred();
        }
        Cred.MergeFrom(other.Cred);
      }
      if (other.Hard != false) {
        Hard = other.Hard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 24: {
            what_ = (global::Pbx.ClientDel.Types.What) input.ReadEnum();
            break;
          }
          case 34: {
            delSeq_.AddEntriesFrom(input, _repeated_delSeq_codec);
            break;
          }
          case 42: {
            UserId = input.ReadString();
            break;
          }
          case 50: {
            if (cred_ == null) {
              cred_ = new global::Pbx.ClientCred();
            }
            input.ReadMessage(cred_);
            break;
          }
          case 56: {
            Hard = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClientDel message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// What to delete, either "msg" to delete messages (default) or "topic" to delete the topic or "sub"
      /// to delete a subscription to topic.
      /// </summary>
      public enum What {
        [pbr::OriginalName("MSG")] Msg = 0,
        [pbr::OriginalName("TOPIC")] Topic = 1,
        [pbr::OriginalName("SUB")] Sub = 2,
        [pbr::OriginalName("USER")] User = 3,
        [pbr::OriginalName("CRED")] Cred = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// ClientNote is a client-generated notification for topic subscribers
  /// </summary>
  public sealed partial class ClientNote : pb::IMessage<ClientNote> {
    private static readonly pb::MessageParser<ClientNote> _parser = new pb::MessageParser<ClientNote>(() => new ClientNote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientNote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientNote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientNote(ClientNote other) : this() {
      topic_ = other.topic_;
      what_ = other.what_;
      seqId_ = other.seqId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientNote Clone() {
      return new ClientNote(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "what" field.</summary>
    public const int WhatFieldNumber = 2;
    private global::Pbx.InfoNote what_ = 0;
    /// <summary>
    /// what is being reported: "recv" - message received, "read" - message read, "kp" - typing notification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.InfoNote What {
      get { return what_; }
      set {
        what_ = value;
      }
    }

    /// <summary>Field number for the "seq_id" field.</summary>
    public const int SeqIdFieldNumber = 3;
    private int seqId_;
    /// <summary>
    /// Server-issued message ID being reported
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientNote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientNote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (What != other.What) return false;
      if (SeqId != other.SeqId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (What != 0) hash ^= What.GetHashCode();
      if (SeqId != 0) hash ^= SeqId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (What != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) What);
      }
      if (SeqId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SeqId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (What != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) What);
      }
      if (SeqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientNote other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.What != 0) {
        What = other.What;
      }
      if (other.SeqId != 0) {
        SeqId = other.SeqId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 16: {
            what_ = (global::Pbx.InfoNote) input.ReadEnum();
            break;
          }
          case 24: {
            SeqId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientMsg : pb::IMessage<ClientMsg> {
    private static readonly pb::MessageParser<ClientMsg> _parser = new pb::MessageParser<ClientMsg>(() => new ClientMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg(ClientMsg other) : this() {
      onBehalfOf_ = other.onBehalfOf_;
      authLevel_ = other.authLevel_;
      switch (other.MessageCase) {
        case MessageOneofCase.Hi:
          Hi = other.Hi.Clone();
          break;
        case MessageOneofCase.Acc:
          Acc = other.Acc.Clone();
          break;
        case MessageOneofCase.Login:
          Login = other.Login.Clone();
          break;
        case MessageOneofCase.Sub:
          Sub = other.Sub.Clone();
          break;
        case MessageOneofCase.Leave:
          Leave = other.Leave.Clone();
          break;
        case MessageOneofCase.Pub:
          Pub = other.Pub.Clone();
          break;
        case MessageOneofCase.Get:
          Get = other.Get.Clone();
          break;
        case MessageOneofCase.Set:
          Set = other.Set.Clone();
          break;
        case MessageOneofCase.Del:
          Del = other.Del.Clone();
          break;
        case MessageOneofCase.Note:
          Note = other.Note.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMsg Clone() {
      return new ClientMsg(this);
    }

    /// <summary>Field number for the "hi" field.</summary>
    public const int HiFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientHi Hi {
      get { return messageCase_ == MessageOneofCase.Hi ? (global::Pbx.ClientHi) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Hi;
      }
    }

    /// <summary>Field number for the "acc" field.</summary>
    public const int AccFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientAcc Acc {
      get { return messageCase_ == MessageOneofCase.Acc ? (global::Pbx.ClientAcc) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Acc;
      }
    }

    /// <summary>Field number for the "login" field.</summary>
    public const int LoginFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientLogin Login {
      get { return messageCase_ == MessageOneofCase.Login ? (global::Pbx.ClientLogin) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Login;
      }
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientSub Sub {
      get { return messageCase_ == MessageOneofCase.Sub ? (global::Pbx.ClientSub) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Sub;
      }
    }

    /// <summary>Field number for the "leave" field.</summary>
    public const int LeaveFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientLeave Leave {
      get { return messageCase_ == MessageOneofCase.Leave ? (global::Pbx.ClientLeave) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Leave;
      }
    }

    /// <summary>Field number for the "pub" field.</summary>
    public const int PubFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientPub Pub {
      get { return messageCase_ == MessageOneofCase.Pub ? (global::Pbx.ClientPub) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pub;
      }
    }

    /// <summary>Field number for the "get" field.</summary>
    public const int GetFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientGet Get {
      get { return messageCase_ == MessageOneofCase.Get ? (global::Pbx.ClientGet) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Get;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientSet Set {
      get { return messageCase_ == MessageOneofCase.Set ? (global::Pbx.ClientSet) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Set;
      }
    }

    /// <summary>Field number for the "del" field.</summary>
    public const int DelFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientDel Del {
      get { return messageCase_ == MessageOneofCase.Del ? (global::Pbx.ClientDel) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Del;
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientNote Note {
      get { return messageCase_ == MessageOneofCase.Note ? (global::Pbx.ClientNote) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Note;
      }
    }

    /// <summary>Field number for the "on_behalf_of" field.</summary>
    public const int OnBehalfOfFieldNumber = 11;
    private string onBehalfOf_ = "";
    /// <summary>
    /// Root user may send messages on behalf of other users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OnBehalfOf {
      get { return onBehalfOf_; }
      set {
        onBehalfOf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_level" field.</summary>
    public const int AuthLevelFieldNumber = 12;
    private global::Pbx.AuthLevel authLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.AuthLevel AuthLevel {
      get { return authLevel_; }
      set {
        authLevel_ = value;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "Message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Hi = 1,
      Acc = 2,
      Login = 3,
      Sub = 4,
      Leave = 5,
      Pub = 6,
      Get = 7,
      Set = 8,
      Del = 9,
      Note = 10,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hi, other.Hi)) return false;
      if (!object.Equals(Acc, other.Acc)) return false;
      if (!object.Equals(Login, other.Login)) return false;
      if (!object.Equals(Sub, other.Sub)) return false;
      if (!object.Equals(Leave, other.Leave)) return false;
      if (!object.Equals(Pub, other.Pub)) return false;
      if (!object.Equals(Get, other.Get)) return false;
      if (!object.Equals(Set, other.Set)) return false;
      if (!object.Equals(Del, other.Del)) return false;
      if (!object.Equals(Note, other.Note)) return false;
      if (OnBehalfOf != other.OnBehalfOf) return false;
      if (AuthLevel != other.AuthLevel) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Hi) hash ^= Hi.GetHashCode();
      if (messageCase_ == MessageOneofCase.Acc) hash ^= Acc.GetHashCode();
      if (messageCase_ == MessageOneofCase.Login) hash ^= Login.GetHashCode();
      if (messageCase_ == MessageOneofCase.Sub) hash ^= Sub.GetHashCode();
      if (messageCase_ == MessageOneofCase.Leave) hash ^= Leave.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pub) hash ^= Pub.GetHashCode();
      if (messageCase_ == MessageOneofCase.Get) hash ^= Get.GetHashCode();
      if (messageCase_ == MessageOneofCase.Set) hash ^= Set.GetHashCode();
      if (messageCase_ == MessageOneofCase.Del) hash ^= Del.GetHashCode();
      if (messageCase_ == MessageOneofCase.Note) hash ^= Note.GetHashCode();
      if (OnBehalfOf.Length != 0) hash ^= OnBehalfOf.GetHashCode();
      if (AuthLevel != 0) hash ^= AuthLevel.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Hi) {
        output.WriteRawTag(10);
        output.WriteMessage(Hi);
      }
      if (messageCase_ == MessageOneofCase.Acc) {
        output.WriteRawTag(18);
        output.WriteMessage(Acc);
      }
      if (messageCase_ == MessageOneofCase.Login) {
        output.WriteRawTag(26);
        output.WriteMessage(Login);
      }
      if (messageCase_ == MessageOneofCase.Sub) {
        output.WriteRawTag(34);
        output.WriteMessage(Sub);
      }
      if (messageCase_ == MessageOneofCase.Leave) {
        output.WriteRawTag(42);
        output.WriteMessage(Leave);
      }
      if (messageCase_ == MessageOneofCase.Pub) {
        output.WriteRawTag(50);
        output.WriteMessage(Pub);
      }
      if (messageCase_ == MessageOneofCase.Get) {
        output.WriteRawTag(58);
        output.WriteMessage(Get);
      }
      if (messageCase_ == MessageOneofCase.Set) {
        output.WriteRawTag(66);
        output.WriteMessage(Set);
      }
      if (messageCase_ == MessageOneofCase.Del) {
        output.WriteRawTag(74);
        output.WriteMessage(Del);
      }
      if (messageCase_ == MessageOneofCase.Note) {
        output.WriteRawTag(82);
        output.WriteMessage(Note);
      }
      if (OnBehalfOf.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OnBehalfOf);
      }
      if (AuthLevel != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) AuthLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Hi) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hi);
      }
      if (messageCase_ == MessageOneofCase.Acc) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acc);
      }
      if (messageCase_ == MessageOneofCase.Login) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Login);
      }
      if (messageCase_ == MessageOneofCase.Sub) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sub);
      }
      if (messageCase_ == MessageOneofCase.Leave) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Leave);
      }
      if (messageCase_ == MessageOneofCase.Pub) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pub);
      }
      if (messageCase_ == MessageOneofCase.Get) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Get);
      }
      if (messageCase_ == MessageOneofCase.Set) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      if (messageCase_ == MessageOneofCase.Del) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Del);
      }
      if (messageCase_ == MessageOneofCase.Note) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (OnBehalfOf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OnBehalfOf);
      }
      if (AuthLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMsg other) {
      if (other == null) {
        return;
      }
      if (other.OnBehalfOf.Length != 0) {
        OnBehalfOf = other.OnBehalfOf;
      }
      if (other.AuthLevel != 0) {
        AuthLevel = other.AuthLevel;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Hi:
          if (Hi == null) {
            Hi = new global::Pbx.ClientHi();
          }
          Hi.MergeFrom(other.Hi);
          break;
        case MessageOneofCase.Acc:
          if (Acc == null) {
            Acc = new global::Pbx.ClientAcc();
          }
          Acc.MergeFrom(other.Acc);
          break;
        case MessageOneofCase.Login:
          if (Login == null) {
            Login = new global::Pbx.ClientLogin();
          }
          Login.MergeFrom(other.Login);
          break;
        case MessageOneofCase.Sub:
          if (Sub == null) {
            Sub = new global::Pbx.ClientSub();
          }
          Sub.MergeFrom(other.Sub);
          break;
        case MessageOneofCase.Leave:
          if (Leave == null) {
            Leave = new global::Pbx.ClientLeave();
          }
          Leave.MergeFrom(other.Leave);
          break;
        case MessageOneofCase.Pub:
          if (Pub == null) {
            Pub = new global::Pbx.ClientPub();
          }
          Pub.MergeFrom(other.Pub);
          break;
        case MessageOneofCase.Get:
          if (Get == null) {
            Get = new global::Pbx.ClientGet();
          }
          Get.MergeFrom(other.Get);
          break;
        case MessageOneofCase.Set:
          if (Set == null) {
            Set = new global::Pbx.ClientSet();
          }
          Set.MergeFrom(other.Set);
          break;
        case MessageOneofCase.Del:
          if (Del == null) {
            Del = new global::Pbx.ClientDel();
          }
          Del.MergeFrom(other.Del);
          break;
        case MessageOneofCase.Note:
          if (Note == null) {
            Note = new global::Pbx.ClientNote();
          }
          Note.MergeFrom(other.Note);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Pbx.ClientHi subBuilder = new global::Pbx.ClientHi();
            if (messageCase_ == MessageOneofCase.Hi) {
              subBuilder.MergeFrom(Hi);
            }
            input.ReadMessage(subBuilder);
            Hi = subBuilder;
            break;
          }
          case 18: {
            global::Pbx.ClientAcc subBuilder = new global::Pbx.ClientAcc();
            if (messageCase_ == MessageOneofCase.Acc) {
              subBuilder.MergeFrom(Acc);
            }
            input.ReadMessage(subBuilder);
            Acc = subBuilder;
            break;
          }
          case 26: {
            global::Pbx.ClientLogin subBuilder = new global::Pbx.ClientLogin();
            if (messageCase_ == MessageOneofCase.Login) {
              subBuilder.MergeFrom(Login);
            }
            input.ReadMessage(subBuilder);
            Login = subBuilder;
            break;
          }
          case 34: {
            global::Pbx.ClientSub subBuilder = new global::Pbx.ClientSub();
            if (messageCase_ == MessageOneofCase.Sub) {
              subBuilder.MergeFrom(Sub);
            }
            input.ReadMessage(subBuilder);
            Sub = subBuilder;
            break;
          }
          case 42: {
            global::Pbx.ClientLeave subBuilder = new global::Pbx.ClientLeave();
            if (messageCase_ == MessageOneofCase.Leave) {
              subBuilder.MergeFrom(Leave);
            }
            input.ReadMessage(subBuilder);
            Leave = subBuilder;
            break;
          }
          case 50: {
            global::Pbx.ClientPub subBuilder = new global::Pbx.ClientPub();
            if (messageCase_ == MessageOneofCase.Pub) {
              subBuilder.MergeFrom(Pub);
            }
            input.ReadMessage(subBuilder);
            Pub = subBuilder;
            break;
          }
          case 58: {
            global::Pbx.ClientGet subBuilder = new global::Pbx.ClientGet();
            if (messageCase_ == MessageOneofCase.Get) {
              subBuilder.MergeFrom(Get);
            }
            input.ReadMessage(subBuilder);
            Get = subBuilder;
            break;
          }
          case 66: {
            global::Pbx.ClientSet subBuilder = new global::Pbx.ClientSet();
            if (messageCase_ == MessageOneofCase.Set) {
              subBuilder.MergeFrom(Set);
            }
            input.ReadMessage(subBuilder);
            Set = subBuilder;
            break;
          }
          case 74: {
            global::Pbx.ClientDel subBuilder = new global::Pbx.ClientDel();
            if (messageCase_ == MessageOneofCase.Del) {
              subBuilder.MergeFrom(Del);
            }
            input.ReadMessage(subBuilder);
            Del = subBuilder;
            break;
          }
          case 82: {
            global::Pbx.ClientNote subBuilder = new global::Pbx.ClientNote();
            if (messageCase_ == MessageOneofCase.Note) {
              subBuilder.MergeFrom(Note);
            }
            input.ReadMessage(subBuilder);
            Note = subBuilder;
            break;
          }
          case 90: {
            OnBehalfOf = input.ReadString();
            break;
          }
          case 96: {
            authLevel_ = (global::Pbx.AuthLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Credentials
  /// </summary>
  public sealed partial class ServerCred : pb::IMessage<ServerCred> {
    private static readonly pb::MessageParser<ServerCred> _parser = new pb::MessageParser<ServerCred>(() => new ServerCred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerCred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCred(ServerCred other) : this() {
      method_ = other.method_;
      value_ = other.value_;
      done_ = other.done_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCred Clone() {
      return new ServerCred(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    /// <summary>
    /// Credential type, i.e. `email` or `tel`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// Value to verify, i.e. `user@example.com` or `+18003287448`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "done" field.</summary>
    public const int DoneFieldNumber = 3;
    private bool done_;
    /// <summary>
    /// Indicator that the credential is validated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Done {
      get { return done_; }
      set {
        done_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerCred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerCred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Value != other.Value) return false;
      if (Done != other.Done) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Done != false) hash ^= Done.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Done != false) {
        output.WriteRawTag(24);
        output.WriteBool(Done);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Done != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerCred other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Done != false) {
        Done = other.Done;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            Done = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Topic description, S2C in Meta message
  /// </summary>
  public sealed partial class TopicDesc : pb::IMessage<TopicDesc> {
    private static readonly pb::MessageParser<TopicDesc> _parser = new pb::MessageParser<TopicDesc>(() => new TopicDesc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicDesc(TopicDesc other) : this() {
      createdAt_ = other.createdAt_;
      updatedAt_ = other.updatedAt_;
      touchedAt_ = other.touchedAt_;
      defacs_ = other.defacs_ != null ? other.defacs_.Clone() : null;
      acs_ = other.acs_ != null ? other.acs_.Clone() : null;
      seqId_ = other.seqId_;
      readId_ = other.readId_;
      recvId_ = other.recvId_;
      delId_ = other.delId_;
      public_ = other.public_;
      private_ = other.private_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicDesc Clone() {
      return new TopicDesc(this);
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 1;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 2;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "touched_at" field.</summary>
    public const int TouchedAtFieldNumber = 3;
    private long touchedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TouchedAt {
      get { return touchedAt_; }
      set {
        touchedAt_ = value;
      }
    }

    /// <summary>Field number for the "defacs" field.</summary>
    public const int DefacsFieldNumber = 4;
    private global::Pbx.DefaultAcsMode defacs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.DefaultAcsMode Defacs {
      get { return defacs_; }
      set {
        defacs_ = value;
      }
    }

    /// <summary>Field number for the "acs" field.</summary>
    public const int AcsFieldNumber = 5;
    private global::Pbx.AccessMode acs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.AccessMode Acs {
      get { return acs_; }
      set {
        acs_ = value;
      }
    }

    /// <summary>Field number for the "seq_id" field.</summary>
    public const int SeqIdFieldNumber = 6;
    private int seqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    /// <summary>Field number for the "read_id" field.</summary>
    public const int ReadIdFieldNumber = 7;
    private int readId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadId {
      get { return readId_; }
      set {
        readId_ = value;
      }
    }

    /// <summary>Field number for the "recv_id" field.</summary>
    public const int RecvIdFieldNumber = 8;
    private int recvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecvId {
      get { return recvId_; }
      set {
        recvId_ = value;
      }
    }

    /// <summary>Field number for the "del_id" field.</summary>
    public const int DelIdFieldNumber = 9;
    private int delId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelId {
      get { return delId_; }
      set {
        delId_ = value;
      }
    }

    /// <summary>Field number for the "public" field.</summary>
    public const int PublicFieldNumber = 10;
    private pb::ByteString public_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Public {
      get { return public_; }
      set {
        public_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 11;
    private pb::ByteString private_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Private {
      get { return private_; }
      set {
        private_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreatedAt != other.CreatedAt) return false;
      if (UpdatedAt != other.UpdatedAt) return false;
      if (TouchedAt != other.TouchedAt) return false;
      if (!object.Equals(Defacs, other.Defacs)) return false;
      if (!object.Equals(Acs, other.Acs)) return false;
      if (SeqId != other.SeqId) return false;
      if (ReadId != other.ReadId) return false;
      if (RecvId != other.RecvId) return false;
      if (DelId != other.DelId) return false;
      if (Public != other.Public) return false;
      if (Private != other.Private) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (TouchedAt != 0L) hash ^= TouchedAt.GetHashCode();
      if (defacs_ != null) hash ^= Defacs.GetHashCode();
      if (acs_ != null) hash ^= Acs.GetHashCode();
      if (SeqId != 0) hash ^= SeqId.GetHashCode();
      if (ReadId != 0) hash ^= ReadId.GetHashCode();
      if (RecvId != 0) hash ^= RecvId.GetHashCode();
      if (DelId != 0) hash ^= DelId.GetHashCode();
      if (Public.Length != 0) hash ^= Public.GetHashCode();
      if (Private.Length != 0) hash ^= Private.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreatedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpdatedAt);
      }
      if (TouchedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TouchedAt);
      }
      if (defacs_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Defacs);
      }
      if (acs_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acs);
      }
      if (SeqId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SeqId);
      }
      if (ReadId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ReadId);
      }
      if (RecvId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RecvId);
      }
      if (DelId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DelId);
      }
      if (Public.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Public);
      }
      if (Private.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(Private);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (TouchedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TouchedAt);
      }
      if (defacs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Defacs);
      }
      if (acs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acs);
      }
      if (SeqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      if (ReadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadId);
      }
      if (RecvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecvId);
      }
      if (DelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelId);
      }
      if (Public.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Public);
      }
      if (Private.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Private);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicDesc other) {
      if (other == null) {
        return;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      if (other.TouchedAt != 0L) {
        TouchedAt = other.TouchedAt;
      }
      if (other.defacs_ != null) {
        if (defacs_ == null) {
          defacs_ = new global::Pbx.DefaultAcsMode();
        }
        Defacs.MergeFrom(other.Defacs);
      }
      if (other.acs_ != null) {
        if (acs_ == null) {
          acs_ = new global::Pbx.AccessMode();
        }
        Acs.MergeFrom(other.Acs);
      }
      if (other.SeqId != 0) {
        SeqId = other.SeqId;
      }
      if (other.ReadId != 0) {
        ReadId = other.ReadId;
      }
      if (other.RecvId != 0) {
        RecvId = other.RecvId;
      }
      if (other.DelId != 0) {
        DelId = other.DelId;
      }
      if (other.Public.Length != 0) {
        Public = other.Public;
      }
      if (other.Private.Length != 0) {
        Private = other.Private;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 16: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 24: {
            TouchedAt = input.ReadInt64();
            break;
          }
          case 34: {
            if (defacs_ == null) {
              defacs_ = new global::Pbx.DefaultAcsMode();
            }
            input.ReadMessage(defacs_);
            break;
          }
          case 42: {
            if (acs_ == null) {
              acs_ = new global::Pbx.AccessMode();
            }
            input.ReadMessage(acs_);
            break;
          }
          case 48: {
            SeqId = input.ReadInt32();
            break;
          }
          case 56: {
            ReadId = input.ReadInt32();
            break;
          }
          case 64: {
            RecvId = input.ReadInt32();
            break;
          }
          case 72: {
            DelId = input.ReadInt32();
            break;
          }
          case 82: {
            Public = input.ReadBytes();
            break;
          }
          case 90: {
            Private = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgTopicSub: topic subscription details, sent in Meta message
  /// </summary>
  public sealed partial class TopicSub : pb::IMessage<TopicSub> {
    private static readonly pb::MessageParser<TopicSub> _parser = new pb::MessageParser<TopicSub>(() => new TopicSub());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicSub> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicSub() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicSub(TopicSub other) : this() {
      updatedAt_ = other.updatedAt_;
      deletedAt_ = other.deletedAt_;
      online_ = other.online_;
      acs_ = other.acs_ != null ? other.acs_.Clone() : null;
      readId_ = other.readId_;
      recvId_ = other.recvId_;
      public_ = other.public_;
      private_ = other.private_;
      userId_ = other.userId_;
      topic_ = other.topic_;
      touchedAt_ = other.touchedAt_;
      seqId_ = other.seqId_;
      delId_ = other.delId_;
      lastSeenTime_ = other.lastSeenTime_;
      lastSeenUserAgent_ = other.lastSeenUserAgent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicSub Clone() {
      return new TopicSub(this);
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 1;
    private long updatedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "deleted_at" field.</summary>
    public const int DeletedAtFieldNumber = 2;
    private long deletedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeletedAt {
      get { return deletedAt_; }
      set {
        deletedAt_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 3;
    private bool online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "acs" field.</summary>
    public const int AcsFieldNumber = 4;
    private global::Pbx.AccessMode acs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.AccessMode Acs {
      get { return acs_; }
      set {
        acs_ = value;
      }
    }

    /// <summary>Field number for the "read_id" field.</summary>
    public const int ReadIdFieldNumber = 5;
    private int readId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadId {
      get { return readId_; }
      set {
        readId_ = value;
      }
    }

    /// <summary>Field number for the "recv_id" field.</summary>
    public const int RecvIdFieldNumber = 6;
    private int recvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecvId {
      get { return recvId_; }
      set {
        recvId_ = value;
      }
    }

    /// <summary>Field number for the "public" field.</summary>
    public const int PublicFieldNumber = 7;
    private pb::ByteString public_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Public {
      get { return public_; }
      set {
        public_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 8;
    private pb::ByteString private_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Private {
      get { return private_; }
      set {
        private_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 9;
    private string userId_ = "";
    /// <summary>
    /// Uid of the subscribed user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 10;
    private string topic_ = "";
    /// <summary>
    /// Topic name of this subscription
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "touched_at" field.</summary>
    public const int TouchedAtFieldNumber = 11;
    private long touchedAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TouchedAt {
      get { return touchedAt_; }
      set {
        touchedAt_ = value;
      }
    }

    /// <summary>Field number for the "seq_id" field.</summary>
    public const int SeqIdFieldNumber = 12;
    private int seqId_;
    /// <summary>
    /// ID of the last {data} message in a topic
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    /// <summary>Field number for the "del_id" field.</summary>
    public const int DelIdFieldNumber = 13;
    private int delId_;
    /// <summary>
    /// Messages are deleted up to this ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelId {
      get { return delId_; }
      set {
        delId_ = value;
      }
    }

    /// <summary>Field number for the "last_seen_time" field.</summary>
    public const int LastSeenTimeFieldNumber = 14;
    private long lastSeenTime_;
    /// <summary>
    /// Other user's last online timestamp &amp; user agent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSeenTime {
      get { return lastSeenTime_; }
      set {
        lastSeenTime_ = value;
      }
    }

    /// <summary>Field number for the "last_seen_user_agent" field.</summary>
    public const int LastSeenUserAgentFieldNumber = 15;
    private string lastSeenUserAgent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastSeenUserAgent {
      get { return lastSeenUserAgent_; }
      set {
        lastSeenUserAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicSub);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicSub other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpdatedAt != other.UpdatedAt) return false;
      if (DeletedAt != other.DeletedAt) return false;
      if (Online != other.Online) return false;
      if (!object.Equals(Acs, other.Acs)) return false;
      if (ReadId != other.ReadId) return false;
      if (RecvId != other.RecvId) return false;
      if (Public != other.Public) return false;
      if (Private != other.Private) return false;
      if (UserId != other.UserId) return false;
      if (Topic != other.Topic) return false;
      if (TouchedAt != other.TouchedAt) return false;
      if (SeqId != other.SeqId) return false;
      if (DelId != other.DelId) return false;
      if (LastSeenTime != other.LastSeenTime) return false;
      if (LastSeenUserAgent != other.LastSeenUserAgent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpdatedAt != 0L) hash ^= UpdatedAt.GetHashCode();
      if (DeletedAt != 0L) hash ^= DeletedAt.GetHashCode();
      if (Online != false) hash ^= Online.GetHashCode();
      if (acs_ != null) hash ^= Acs.GetHashCode();
      if (ReadId != 0) hash ^= ReadId.GetHashCode();
      if (RecvId != 0) hash ^= RecvId.GetHashCode();
      if (Public.Length != 0) hash ^= Public.GetHashCode();
      if (Private.Length != 0) hash ^= Private.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (TouchedAt != 0L) hash ^= TouchedAt.GetHashCode();
      if (SeqId != 0) hash ^= SeqId.GetHashCode();
      if (DelId != 0) hash ^= DelId.GetHashCode();
      if (LastSeenTime != 0L) hash ^= LastSeenTime.GetHashCode();
      if (LastSeenUserAgent.Length != 0) hash ^= LastSeenUserAgent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpdatedAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UpdatedAt);
      }
      if (DeletedAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DeletedAt);
      }
      if (Online != false) {
        output.WriteRawTag(24);
        output.WriteBool(Online);
      }
      if (acs_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Acs);
      }
      if (ReadId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ReadId);
      }
      if (RecvId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RecvId);
      }
      if (Public.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Public);
      }
      if (Private.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Private);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UserId);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Topic);
      }
      if (TouchedAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TouchedAt);
      }
      if (SeqId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SeqId);
      }
      if (DelId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DelId);
      }
      if (LastSeenTime != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(LastSeenTime);
      }
      if (LastSeenUserAgent.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(LastSeenUserAgent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedAt);
      }
      if (DeletedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeletedAt);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (acs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acs);
      }
      if (ReadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadId);
      }
      if (RecvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecvId);
      }
      if (Public.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Public);
      }
      if (Private.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Private);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (TouchedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TouchedAt);
      }
      if (SeqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      if (DelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelId);
      }
      if (LastSeenTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSeenTime);
      }
      if (LastSeenUserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastSeenUserAgent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicSub other) {
      if (other == null) {
        return;
      }
      if (other.UpdatedAt != 0L) {
        UpdatedAt = other.UpdatedAt;
      }
      if (other.DeletedAt != 0L) {
        DeletedAt = other.DeletedAt;
      }
      if (other.Online != false) {
        Online = other.Online;
      }
      if (other.acs_ != null) {
        if (acs_ == null) {
          acs_ = new global::Pbx.AccessMode();
        }
        Acs.MergeFrom(other.Acs);
      }
      if (other.ReadId != 0) {
        ReadId = other.ReadId;
      }
      if (other.RecvId != 0) {
        RecvId = other.RecvId;
      }
      if (other.Public.Length != 0) {
        Public = other.Public;
      }
      if (other.Private.Length != 0) {
        Private = other.Private;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.TouchedAt != 0L) {
        TouchedAt = other.TouchedAt;
      }
      if (other.SeqId != 0) {
        SeqId = other.SeqId;
      }
      if (other.DelId != 0) {
        DelId = other.DelId;
      }
      if (other.LastSeenTime != 0L) {
        LastSeenTime = other.LastSeenTime;
      }
      if (other.LastSeenUserAgent.Length != 0) {
        LastSeenUserAgent = other.LastSeenUserAgent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpdatedAt = input.ReadInt64();
            break;
          }
          case 16: {
            DeletedAt = input.ReadInt64();
            break;
          }
          case 24: {
            Online = input.ReadBool();
            break;
          }
          case 34: {
            if (acs_ == null) {
              acs_ = new global::Pbx.AccessMode();
            }
            input.ReadMessage(acs_);
            break;
          }
          case 40: {
            ReadId = input.ReadInt32();
            break;
          }
          case 48: {
            RecvId = input.ReadInt32();
            break;
          }
          case 58: {
            Public = input.ReadBytes();
            break;
          }
          case 66: {
            Private = input.ReadBytes();
            break;
          }
          case 74: {
            UserId = input.ReadString();
            break;
          }
          case 82: {
            Topic = input.ReadString();
            break;
          }
          case 88: {
            TouchedAt = input.ReadInt64();
            break;
          }
          case 96: {
            SeqId = input.ReadInt32();
            break;
          }
          case 104: {
            DelId = input.ReadInt32();
            break;
          }
          case 112: {
            LastSeenTime = input.ReadInt64();
            break;
          }
          case 122: {
            LastSeenUserAgent = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelValues : pb::IMessage<DelValues> {
    private static readonly pb::MessageParser<DelValues> _parser = new pb::MessageParser<DelValues>(() => new DelValues());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelValues> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelValues() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelValues(DelValues other) : this() {
      delId_ = other.delId_;
      delSeq_ = other.delSeq_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelValues Clone() {
      return new DelValues(this);
    }

    /// <summary>Field number for the "del_id" field.</summary>
    public const int DelIdFieldNumber = 1;
    private int delId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelId {
      get { return delId_; }
      set {
        delId_ = value;
      }
    }

    /// <summary>Field number for the "del_seq" field.</summary>
    public const int DelSeqFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pbx.SeqRange> _repeated_delSeq_codec
        = pb::FieldCodec.ForMessage(18, global::Pbx.SeqRange.Parser);
    private readonly pbc::RepeatedField<global::Pbx.SeqRange> delSeq_ = new pbc::RepeatedField<global::Pbx.SeqRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.SeqRange> DelSeq {
      get { return delSeq_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelValues);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelValues other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DelId != other.DelId) return false;
      if(!delSeq_.Equals(other.delSeq_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DelId != 0) hash ^= DelId.GetHashCode();
      hash ^= delSeq_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DelId);
      }
      delSeq_.WriteTo(output, _repeated_delSeq_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelId);
      }
      size += delSeq_.CalculateSize(_repeated_delSeq_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelValues other) {
      if (other == null) {
        return;
      }
      if (other.DelId != 0) {
        DelId = other.DelId;
      }
      delSeq_.Add(other.delSeq_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DelId = input.ReadInt32();
            break;
          }
          case 18: {
            delSeq_.AddEntriesFrom(input, _repeated_delSeq_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// {ctrl} message
  /// </summary>
  public sealed partial class ServerCtrl : pb::IMessage<ServerCtrl> {
    private static readonly pb::MessageParser<ServerCtrl> _parser = new pb::MessageParser<ServerCtrl>(() => new ServerCtrl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerCtrl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCtrl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCtrl(ServerCtrl other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      code_ = other.code_;
      text_ = other.text_;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerCtrl Clone() {
      return new ServerCtrl(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 5;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_params_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 42);
    private readonly pbc::MapField<string, pb::ByteString> params_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerCtrl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerCtrl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (Code != other.Code) return false;
      if (Text != other.Text) return false;
      if (!Params.Equals(other.Params)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (Code != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Code);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      params_.WriteTo(output, _map_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      size += params_.CalculateSize(_map_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerCtrl other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 24: {
            Code = input.ReadInt32();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 42: {
            params_.AddEntriesFrom(input, _map_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// {data} message
  /// </summary>
  public sealed partial class ServerData : pb::IMessage<ServerData> {
    private static readonly pb::MessageParser<ServerData> _parser = new pb::MessageParser<ServerData>(() => new ServerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerData(ServerData other) : this() {
      topic_ = other.topic_;
      fromUserId_ = other.fromUserId_;
      timestamp_ = other.timestamp_;
      deletedAt_ = other.deletedAt_;
      seqId_ = other.seqId_;
      head_ = other.head_.Clone();
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerData Clone() {
      return new ServerData(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 2;
    private string fromUserId_ = "";
    /// <summary>
    /// ID of the user who originated the message as {pub}, could be empty if sent by the system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private long timestamp_;
    /// <summary>
    /// Timestamp when the message was sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "deleted_at" field.</summary>
    public const int DeletedAtFieldNumber = 3;
    private long deletedAt_;
    /// <summary>
    /// Timestamp when the message was deleted or 0. Milliseconds since the epoch 01/01/1970
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DeletedAt {
      get { return deletedAt_; }
      set {
        deletedAt_ = value;
      }
    }

    /// <summary>Field number for the "seq_id" field.</summary>
    public const int SeqIdFieldNumber = 4;
    private int seqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 5;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_head_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 42);
    private readonly pbc::MapField<string, pb::ByteString> head_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> Head {
      get { return head_; }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (FromUserId != other.FromUserId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (DeletedAt != other.DeletedAt) return false;
      if (SeqId != other.SeqId) return false;
      if (!Head.Equals(other.Head)) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (FromUserId.Length != 0) hash ^= FromUserId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (DeletedAt != 0L) hash ^= DeletedAt.GetHashCode();
      if (SeqId != 0) hash ^= SeqId.GetHashCode();
      hash ^= Head.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (FromUserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FromUserId);
      }
      if (DeletedAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DeletedAt);
      }
      if (SeqId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeqId);
      }
      head_.WriteTo(output, _map_head_codec);
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Content);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (FromUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromUserId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (DeletedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeletedAt);
      }
      if (SeqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      size += head_.CalculateSize(_map_head_codec);
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerData other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.FromUserId.Length != 0) {
        FromUserId = other.FromUserId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.DeletedAt != 0L) {
        DeletedAt = other.DeletedAt;
      }
      if (other.SeqId != 0) {
        SeqId = other.SeqId;
      }
      head_.Add(other.head_);
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            FromUserId = input.ReadString();
            break;
          }
          case 24: {
            DeletedAt = input.ReadInt64();
            break;
          }
          case 32: {
            SeqId = input.ReadInt32();
            break;
          }
          case 42: {
            head_.AddEntriesFrom(input, _map_head_codec);
            break;
          }
          case 50: {
            Content = input.ReadBytes();
            break;
          }
          case 56: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// {pres} message
  /// </summary>
  public sealed partial class ServerPres : pb::IMessage<ServerPres> {
    private static readonly pb::MessageParser<ServerPres> _parser = new pb::MessageParser<ServerPres>(() => new ServerPres());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerPres> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerPres() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerPres(ServerPres other) : this() {
      topic_ = other.topic_;
      src_ = other.src_;
      what_ = other.what_;
      userAgent_ = other.userAgent_;
      seqId_ = other.seqId_;
      delId_ = other.delId_;
      delSeq_ = other.delSeq_.Clone();
      targetUserId_ = other.targetUserId_;
      actorUserId_ = other.actorUserId_;
      acs_ = other.acs_ != null ? other.acs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerPres Clone() {
      return new ServerPres(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "src" field.</summary>
    public const int SrcFieldNumber = 2;
    private string src_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Src {
      get { return src_; }
      set {
        src_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "what" field.</summary>
    public const int WhatFieldNumber = 3;
    private global::Pbx.ServerPres.Types.What what_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerPres.Types.What What {
      get { return what_; }
      set {
        what_ = value;
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 4;
    private string userAgent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seq_id" field.</summary>
    public const int SeqIdFieldNumber = 5;
    private int seqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    /// <summary>Field number for the "del_id" field.</summary>
    public const int DelIdFieldNumber = 6;
    private int delId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelId {
      get { return delId_; }
      set {
        delId_ = value;
      }
    }

    /// <summary>Field number for the "del_seq" field.</summary>
    public const int DelSeqFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pbx.SeqRange> _repeated_delSeq_codec
        = pb::FieldCodec.ForMessage(58, global::Pbx.SeqRange.Parser);
    private readonly pbc::RepeatedField<global::Pbx.SeqRange> delSeq_ = new pbc::RepeatedField<global::Pbx.SeqRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.SeqRange> DelSeq {
      get { return delSeq_; }
    }

    /// <summary>Field number for the "target_user_id" field.</summary>
    public const int TargetUserIdFieldNumber = 8;
    private string targetUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetUserId {
      get { return targetUserId_; }
      set {
        targetUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actor_user_id" field.</summary>
    public const int ActorUserIdFieldNumber = 9;
    private string actorUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActorUserId {
      get { return actorUserId_; }
      set {
        actorUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acs" field.</summary>
    public const int AcsFieldNumber = 10;
    private global::Pbx.AccessMode acs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.AccessMode Acs {
      get { return acs_; }
      set {
        acs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerPres);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerPres other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (Src != other.Src) return false;
      if (What != other.What) return false;
      if (UserAgent != other.UserAgent) return false;
      if (SeqId != other.SeqId) return false;
      if (DelId != other.DelId) return false;
      if(!delSeq_.Equals(other.delSeq_)) return false;
      if (TargetUserId != other.TargetUserId) return false;
      if (ActorUserId != other.ActorUserId) return false;
      if (!object.Equals(Acs, other.Acs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (Src.Length != 0) hash ^= Src.GetHashCode();
      if (What != 0) hash ^= What.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (SeqId != 0) hash ^= SeqId.GetHashCode();
      if (DelId != 0) hash ^= DelId.GetHashCode();
      hash ^= delSeq_.GetHashCode();
      if (TargetUserId.Length != 0) hash ^= TargetUserId.GetHashCode();
      if (ActorUserId.Length != 0) hash ^= ActorUserId.GetHashCode();
      if (acs_ != null) hash ^= Acs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (Src.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Src);
      }
      if (What != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) What);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserAgent);
      }
      if (SeqId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SeqId);
      }
      if (DelId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DelId);
      }
      delSeq_.WriteTo(output, _repeated_delSeq_codec);
      if (TargetUserId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TargetUserId);
      }
      if (ActorUserId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ActorUserId);
      }
      if (acs_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Acs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (Src.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Src);
      }
      if (What != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) What);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (SeqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      if (DelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelId);
      }
      size += delSeq_.CalculateSize(_repeated_delSeq_codec);
      if (TargetUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetUserId);
      }
      if (ActorUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActorUserId);
      }
      if (acs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerPres other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.Src.Length != 0) {
        Src = other.Src;
      }
      if (other.What != 0) {
        What = other.What;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.SeqId != 0) {
        SeqId = other.SeqId;
      }
      if (other.DelId != 0) {
        DelId = other.DelId;
      }
      delSeq_.Add(other.delSeq_);
      if (other.TargetUserId.Length != 0) {
        TargetUserId = other.TargetUserId;
      }
      if (other.ActorUserId.Length != 0) {
        ActorUserId = other.ActorUserId;
      }
      if (other.acs_ != null) {
        if (acs_ == null) {
          acs_ = new global::Pbx.AccessMode();
        }
        Acs.MergeFrom(other.Acs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            Src = input.ReadString();
            break;
          }
          case 24: {
            what_ = (global::Pbx.ServerPres.Types.What) input.ReadEnum();
            break;
          }
          case 34: {
            UserAgent = input.ReadString();
            break;
          }
          case 40: {
            SeqId = input.ReadInt32();
            break;
          }
          case 48: {
            DelId = input.ReadInt32();
            break;
          }
          case 58: {
            delSeq_.AddEntriesFrom(input, _repeated_delSeq_codec);
            break;
          }
          case 66: {
            TargetUserId = input.ReadString();
            break;
          }
          case 74: {
            ActorUserId = input.ReadString();
            break;
          }
          case 82: {
            if (acs_ == null) {
              acs_ = new global::Pbx.AccessMode();
            }
            input.ReadMessage(acs_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerPres message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum What {
        [pbr::OriginalName("ON")] On = 0,
        [pbr::OriginalName("OFF")] Off = 1,
        [pbr::OriginalName("UA")] Ua = 3,
        [pbr::OriginalName("UPD")] Upd = 4,
        [pbr::OriginalName("GONE")] Gone = 5,
        [pbr::OriginalName("ACS")] Acs = 6,
        [pbr::OriginalName("TERM")] Term = 7,
        [pbr::OriginalName("MSG")] Msg = 8,
        [pbr::OriginalName("READ")] Read = 9,
        [pbr::OriginalName("RECV")] Recv = 10,
        [pbr::OriginalName("DEL")] Del = 11,
        [pbr::OriginalName("TAGS")] Tags = 12,
      }

    }
    #endregion

  }

  /// <summary>
  /// {meta} message
  /// </summary>
  public sealed partial class ServerMeta : pb::IMessage<ServerMeta> {
    private static readonly pb::MessageParser<ServerMeta> _parser = new pb::MessageParser<ServerMeta>(() => new ServerMeta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMeta(ServerMeta other) : this() {
      id_ = other.id_;
      topic_ = other.topic_;
      desc_ = other.desc_ != null ? other.desc_.Clone() : null;
      sub_ = other.sub_.Clone();
      del_ = other.del_ != null ? other.del_.Clone() : null;
      tags_ = other.tags_.Clone();
      cred_ = other.cred_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMeta Clone() {
      return new ServerMeta(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private global::Pbx.TopicDesc desc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.TopicDesc Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    /// <summary>Field number for the "sub" field.</summary>
    public const int SubFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pbx.TopicSub> _repeated_sub_codec
        = pb::FieldCodec.ForMessage(34, global::Pbx.TopicSub.Parser);
    private readonly pbc::RepeatedField<global::Pbx.TopicSub> sub_ = new pbc::RepeatedField<global::Pbx.TopicSub>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.TopicSub> Sub {
      get { return sub_; }
    }

    /// <summary>Field number for the "del" field.</summary>
    public const int DelFieldNumber = 5;
    private global::Pbx.DelValues del_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.DelValues Del {
      get { return del_; }
      set {
        del_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "cred" field.</summary>
    public const int CredFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Pbx.ServerCred> _repeated_cred_codec
        = pb::FieldCodec.ForMessage(58, global::Pbx.ServerCred.Parser);
    private readonly pbc::RepeatedField<global::Pbx.ServerCred> cred_ = new pbc::RepeatedField<global::Pbx.ServerCred>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.ServerCred> Cred {
      get { return cred_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Topic != other.Topic) return false;
      if (!object.Equals(Desc, other.Desc)) return false;
      if(!sub_.Equals(other.sub_)) return false;
      if (!object.Equals(Del, other.Del)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!cred_.Equals(other.cred_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (desc_ != null) hash ^= Desc.GetHashCode();
      hash ^= sub_.GetHashCode();
      if (del_ != null) hash ^= Del.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= cred_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (desc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Desc);
      }
      sub_.WriteTo(output, _repeated_sub_codec);
      if (del_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Del);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      cred_.WriteTo(output, _repeated_cred_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (desc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
      }
      size += sub_.CalculateSize(_repeated_sub_codec);
      if (del_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Del);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += cred_.CalculateSize(_repeated_cred_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMeta other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.desc_ != null) {
        if (desc_ == null) {
          desc_ = new global::Pbx.TopicDesc();
        }
        Desc.MergeFrom(other.Desc);
      }
      sub_.Add(other.sub_);
      if (other.del_ != null) {
        if (del_ == null) {
          del_ = new global::Pbx.DelValues();
        }
        Del.MergeFrom(other.Del);
      }
      tags_.Add(other.tags_);
      cred_.Add(other.cred_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            if (desc_ == null) {
              desc_ = new global::Pbx.TopicDesc();
            }
            input.ReadMessage(desc_);
            break;
          }
          case 34: {
            sub_.AddEntriesFrom(input, _repeated_sub_codec);
            break;
          }
          case 42: {
            if (del_ == null) {
              del_ = new global::Pbx.DelValues();
            }
            input.ReadMessage(del_);
            break;
          }
          case 50: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 58: {
            cred_.AddEntriesFrom(input, _repeated_cred_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// {info} message: server-side copy of ClientNote with From added
  /// </summary>
  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      topic_ = other.topic_;
      fromUserId_ = other.fromUserId_;
      what_ = other.what_;
      seqId_ = other.seqId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 1;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 2;
    private string fromUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "what" field.</summary>
    public const int WhatFieldNumber = 3;
    private global::Pbx.InfoNote what_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.InfoNote What {
      get { return what_; }
      set {
        what_ = value;
      }
    }

    /// <summary>Field number for the "seq_id" field.</summary>
    public const int SeqIdFieldNumber = 4;
    private int seqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqId {
      get { return seqId_; }
      set {
        seqId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Topic != other.Topic) return false;
      if (FromUserId != other.FromUserId) return false;
      if (What != other.What) return false;
      if (SeqId != other.SeqId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (FromUserId.Length != 0) hash ^= FromUserId.GetHashCode();
      if (What != 0) hash ^= What.GetHashCode();
      if (SeqId != 0) hash ^= SeqId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Topic.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Topic);
      }
      if (FromUserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FromUserId);
      }
      if (What != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) What);
      }
      if (SeqId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SeqId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (FromUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromUserId);
      }
      if (What != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) What);
      }
      if (SeqId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.FromUserId.Length != 0) {
        FromUserId = other.FromUserId;
      }
      if (other.What != 0) {
        What = other.What;
      }
      if (other.SeqId != 0) {
        SeqId = other.SeqId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Topic = input.ReadString();
            break;
          }
          case 18: {
            FromUserId = input.ReadString();
            break;
          }
          case 24: {
            what_ = (global::Pbx.InfoNote) input.ReadEnum();
            break;
          }
          case 32: {
            SeqId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cumulative message
  /// </summary>
  public sealed partial class ServerMsg : pb::IMessage<ServerMsg> {
    private static readonly pb::MessageParser<ServerMsg> _parser = new pb::MessageParser<ServerMsg>(() => new ServerMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg(ServerMsg other) : this() {
      topic_ = other.topic_;
      switch (other.MessageCase) {
        case MessageOneofCase.Ctrl:
          Ctrl = other.Ctrl.Clone();
          break;
        case MessageOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case MessageOneofCase.Pres:
          Pres = other.Pres.Clone();
          break;
        case MessageOneofCase.Meta:
          Meta = other.Meta.Clone();
          break;
        case MessageOneofCase.Info:
          Info = other.Info.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMsg Clone() {
      return new ServerMsg(this);
    }

    /// <summary>Field number for the "ctrl" field.</summary>
    public const int CtrlFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerCtrl Ctrl {
      get { return messageCase_ == MessageOneofCase.Ctrl ? (global::Pbx.ServerCtrl) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Ctrl;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerData Data {
      get { return messageCase_ == MessageOneofCase.Data ? (global::Pbx.ServerData) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Data;
      }
    }

    /// <summary>Field number for the "pres" field.</summary>
    public const int PresFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerPres Pres {
      get { return messageCase_ == MessageOneofCase.Pres ? (global::Pbx.ServerPres) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pres;
      }
    }

    /// <summary>Field number for the "meta" field.</summary>
    public const int MetaFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerMeta Meta {
      get { return messageCase_ == MessageOneofCase.Meta ? (global::Pbx.ServerMeta) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Meta;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerInfo Info {
      get { return messageCase_ == MessageOneofCase.Info ? (global::Pbx.ServerInfo) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Info;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 6;
    private string topic_ = "";
    /// <summary>
    /// When response is sent to Root, send internal topic name too.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "Message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Ctrl = 1,
      Data = 2,
      Pres = 3,
      Meta = 4,
      Info = 5,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ctrl, other.Ctrl)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(Pres, other.Pres)) return false;
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (Topic != other.Topic) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.Ctrl) hash ^= Ctrl.GetHashCode();
      if (messageCase_ == MessageOneofCase.Data) hash ^= Data.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pres) hash ^= Pres.GetHashCode();
      if (messageCase_ == MessageOneofCase.Meta) hash ^= Meta.GetHashCode();
      if (messageCase_ == MessageOneofCase.Info) hash ^= Info.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Ctrl) {
        output.WriteRawTag(10);
        output.WriteMessage(Ctrl);
      }
      if (messageCase_ == MessageOneofCase.Data) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (messageCase_ == MessageOneofCase.Pres) {
        output.WriteRawTag(26);
        output.WriteMessage(Pres);
      }
      if (messageCase_ == MessageOneofCase.Meta) {
        output.WriteRawTag(34);
        output.WriteMessage(Meta);
      }
      if (messageCase_ == MessageOneofCase.Info) {
        output.WriteRawTag(42);
        output.WriteMessage(Info);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Topic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.Ctrl) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ctrl);
      }
      if (messageCase_ == MessageOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (messageCase_ == MessageOneofCase.Pres) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pres);
      }
      if (messageCase_ == MessageOneofCase.Meta) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (messageCase_ == MessageOneofCase.Info) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMsg other) {
      if (other == null) {
        return;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Ctrl:
          if (Ctrl == null) {
            Ctrl = new global::Pbx.ServerCtrl();
          }
          Ctrl.MergeFrom(other.Ctrl);
          break;
        case MessageOneofCase.Data:
          if (Data == null) {
            Data = new global::Pbx.ServerData();
          }
          Data.MergeFrom(other.Data);
          break;
        case MessageOneofCase.Pres:
          if (Pres == null) {
            Pres = new global::Pbx.ServerPres();
          }
          Pres.MergeFrom(other.Pres);
          break;
        case MessageOneofCase.Meta:
          if (Meta == null) {
            Meta = new global::Pbx.ServerMeta();
          }
          Meta.MergeFrom(other.Meta);
          break;
        case MessageOneofCase.Info:
          if (Info == null) {
            Info = new global::Pbx.ServerInfo();
          }
          Info.MergeFrom(other.Info);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Pbx.ServerCtrl subBuilder = new global::Pbx.ServerCtrl();
            if (messageCase_ == MessageOneofCase.Ctrl) {
              subBuilder.MergeFrom(Ctrl);
            }
            input.ReadMessage(subBuilder);
            Ctrl = subBuilder;
            break;
          }
          case 18: {
            global::Pbx.ServerData subBuilder = new global::Pbx.ServerData();
            if (messageCase_ == MessageOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 26: {
            global::Pbx.ServerPres subBuilder = new global::Pbx.ServerPres();
            if (messageCase_ == MessageOneofCase.Pres) {
              subBuilder.MergeFrom(Pres);
            }
            input.ReadMessage(subBuilder);
            Pres = subBuilder;
            break;
          }
          case 34: {
            global::Pbx.ServerMeta subBuilder = new global::Pbx.ServerMeta();
            if (messageCase_ == MessageOneofCase.Meta) {
              subBuilder.MergeFrom(Meta);
            }
            input.ReadMessage(subBuilder);
            Meta = subBuilder;
            break;
          }
          case 42: {
            global::Pbx.ServerInfo subBuilder = new global::Pbx.ServerInfo();
            if (messageCase_ == MessageOneofCase.Info) {
              subBuilder.MergeFrom(Info);
            }
            input.ReadMessage(subBuilder);
            Info = subBuilder;
            break;
          }
          case 50: {
            Topic = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerResp : pb::IMessage<ServerResp> {
    private static readonly pb::MessageParser<ServerResp> _parser = new pb::MessageParser<ServerResp>(() => new ServerResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerResp(ServerResp other) : this() {
      status_ = other.status_;
      srvmsg_ = other.srvmsg_ != null ? other.srvmsg_.Clone() : null;
      clmsg_ = other.clmsg_ != null ? other.clmsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerResp Clone() {
      return new ServerResp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Pbx.RespCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.RespCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "srvmsg" field.</summary>
    public const int SrvmsgFieldNumber = 2;
    private global::Pbx.ServerMsg srvmsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerMsg Srvmsg {
      get { return srvmsg_; }
      set {
        srvmsg_ = value;
      }
    }

    /// <summary>Field number for the "clmsg" field.</summary>
    public const int ClmsgFieldNumber = 3;
    private global::Pbx.ClientMsg clmsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientMsg Clmsg {
      get { return clmsg_; }
      set {
        clmsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Srvmsg, other.Srvmsg)) return false;
      if (!object.Equals(Clmsg, other.Clmsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (srvmsg_ != null) hash ^= Srvmsg.GetHashCode();
      if (clmsg_ != null) hash ^= Clmsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (srvmsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Srvmsg);
      }
      if (clmsg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Clmsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (srvmsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Srvmsg);
      }
      if (clmsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clmsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerResp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.srvmsg_ != null) {
        if (srvmsg_ == null) {
          srvmsg_ = new global::Pbx.ServerMsg();
        }
        Srvmsg.MergeFrom(other.Srvmsg);
      }
      if (other.clmsg_ != null) {
        if (clmsg_ == null) {
          clmsg_ = new global::Pbx.ClientMsg();
        }
        Clmsg.MergeFrom(other.Clmsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Pbx.RespCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (srvmsg_ == null) {
              srvmsg_ = new global::Pbx.ServerMsg();
            }
            input.ReadMessage(srvmsg_);
            break;
          }
          case 26: {
            if (clmsg_ == null) {
              clmsg_ = new global::Pbx.ClientMsg();
            }
            input.ReadMessage(clmsg_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Context message
  /// </summary>
  public sealed partial class Session : pb::IMessage<Session> {
    private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Session> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session(Session other) : this() {
      sessionId_ = other.sessionId_;
      userId_ = other.userId_;
      authLevel_ = other.authLevel_;
      remoteAddr_ = other.remoteAddr_;
      userAgent_ = other.userAgent_;
      deviceId_ = other.deviceId_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session Clone() {
      return new Session(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_level" field.</summary>
    public const int AuthLevelFieldNumber = 3;
    private global::Pbx.AuthLevel authLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.AuthLevel AuthLevel {
      get { return authLevel_; }
      set {
        authLevel_ = value;
      }
    }

    /// <summary>Field number for the "remote_addr" field.</summary>
    public const int RemoteAddrFieldNumber = 4;
    private string remoteAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemoteAddr {
      get { return remoteAddr_; }
      set {
        remoteAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 5;
    private string userAgent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 6;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 7;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Session);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Session other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (UserId != other.UserId) return false;
      if (AuthLevel != other.AuthLevel) return false;
      if (RemoteAddr != other.RemoteAddr) return false;
      if (UserAgent != other.UserAgent) return false;
      if (DeviceId != other.DeviceId) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (AuthLevel != 0) hash ^= AuthLevel.GetHashCode();
      if (RemoteAddr.Length != 0) hash ^= RemoteAddr.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (AuthLevel != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AuthLevel);
      }
      if (RemoteAddr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RemoteAddr);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserAgent);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceId);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (AuthLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuthLevel);
      }
      if (RemoteAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteAddr);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Session other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.AuthLevel != 0) {
        AuthLevel = other.AuthLevel;
      }
      if (other.RemoteAddr.Length != 0) {
        RemoteAddr = other.RemoteAddr;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 24: {
            authLevel_ = (global::Pbx.AuthLevel) input.ReadEnum();
            break;
          }
          case 34: {
            RemoteAddr = input.ReadString();
            break;
          }
          case 42: {
            UserAgent = input.ReadString();
            break;
          }
          case 50: {
            DeviceId = input.ReadString();
            break;
          }
          case 58: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientReq : pb::IMessage<ClientReq> {
    private static readonly pb::MessageParser<ClientReq> _parser = new pb::MessageParser<ClientReq>(() => new ClientReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientReq(ClientReq other) : this() {
      msg_ = other.msg_ != null ? other.msg_.Clone() : null;
      sess_ = other.sess_ != null ? other.sess_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientReq Clone() {
      return new ClientReq(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private global::Pbx.ClientMsg msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ClientMsg Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    /// <summary>Field number for the "sess" field.</summary>
    public const int SessFieldNumber = 2;
    private global::Pbx.Session sess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.Session Sess {
      get { return sess_; }
      set {
        sess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Msg, other.Msg)) return false;
      if (!object.Equals(Sess, other.Sess)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (sess_ != null) hash ^= Sess.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
      if (sess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (sess_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sess);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientReq other) {
      if (other == null) {
        return;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          msg_ = new global::Pbx.ClientMsg();
        }
        Msg.MergeFrom(other.Msg);
      }
      if (other.sess_ != null) {
        if (sess_ == null) {
          sess_ = new global::Pbx.Session();
        }
        Sess.MergeFrom(other.Sess);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (msg_ == null) {
              msg_ = new global::Pbx.ClientMsg();
            }
            input.ReadMessage(msg_);
            break;
          }
          case 18: {
            if (sess_ == null) {
              sess_ = new global::Pbx.Session();
            }
            input.ReadMessage(sess_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchQuery : pb::IMessage<SearchQuery> {
    private static readonly pb::MessageParser<SearchQuery> _parser = new pb::MessageParser<SearchQuery>(() => new SearchQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchQuery(SearchQuery other) : this() {
      userId_ = other.userId_;
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchQuery Clone() {
      return new SearchQuery(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 2;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchQuery other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchFound : pb::IMessage<SearchFound> {
    private static readonly pb::MessageParser<SearchFound> _parser = new pb::MessageParser<SearchFound>(() => new SearchFound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchFound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFound(SearchFound other) : this() {
      status_ = other.status_;
      query_ = other.query_;
      result_ = other.result_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchFound Clone() {
      return new SearchFound(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Pbx.RespCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.RespCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 2;
    private string query_ = "";
    /// <summary>
    /// New search query If status == REPLACE, otherwise unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbx.TopicSub> _repeated_result_codec
        = pb::FieldCodec.ForMessage(26, global::Pbx.TopicSub.Parser);
    private readonly pbc::RepeatedField<global::Pbx.TopicSub> result_ = new pbc::RepeatedField<global::Pbx.TopicSub>();
    /// <summary>
    /// Search results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbx.TopicSub> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchFound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchFound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Query != other.Query) return false;
      if(!result_.Equals(other.result_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      hash ^= result_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Query);
      }
      result_.WriteTo(output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      size += result_.CalculateSize(_repeated_result_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchFound other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      result_.Add(other.result_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Pbx.RespCode) input.ReadEnum();
            break;
          }
          case 18: {
            Query = input.ReadString();
            break;
          }
          case 26: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TopicEvent : pb::IMessage<TopicEvent> {
    private static readonly pb::MessageParser<TopicEvent> _parser = new pb::MessageParser<TopicEvent>(() => new TopicEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TopicEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicEvent(TopicEvent other) : this() {
      action_ = other.action_;
      name_ = other.name_;
      desc_ = other.desc_ != null ? other.desc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TopicEvent Clone() {
      return new TopicEvent(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Pbx.Crud action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.Crud Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private global::Pbx.TopicDesc desc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.TopicDesc Desc {
      get { return desc_; }
      set {
        desc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TopicEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TopicEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Desc, other.Desc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (desc_ != null) hash ^= Desc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (desc_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Desc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (desc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Desc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TopicEvent other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.desc_ != null) {
        if (desc_ == null) {
          desc_ = new global::Pbx.TopicDesc();
        }
        Desc.MergeFrom(other.Desc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            action_ = (global::Pbx.Crud) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (desc_ == null) {
              desc_ = new global::Pbx.TopicDesc();
            }
            input.ReadMessage(desc_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountEvent : pb::IMessage<AccountEvent> {
    private static readonly pb::MessageParser<AccountEvent> _parser = new pb::MessageParser<AccountEvent>(() => new AccountEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountEvent(AccountEvent other) : this() {
      action_ = other.action_;
      userId_ = other.userId_;
      defaultAcs_ = other.defaultAcs_ != null ? other.defaultAcs_.Clone() : null;
      public_ = other.public_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountEvent Clone() {
      return new AccountEvent(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Pbx.Crud action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.Crud Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_acs" field.</summary>
    public const int DefaultAcsFieldNumber = 3;
    private global::Pbx.DefaultAcsMode defaultAcs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.DefaultAcsMode DefaultAcs {
      get { return defaultAcs_; }
      set {
        defaultAcs_ = value;
      }
    }

    /// <summary>Field number for the "public" field.</summary>
    public const int PublicFieldNumber = 4;
    private pb::ByteString public_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Public {
      get { return public_; }
      set {
        public_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Indexable tags for user discovery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(DefaultAcs, other.DefaultAcs)) return false;
      if (Public != other.Public) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (defaultAcs_ != null) hash ^= DefaultAcs.GetHashCode();
      if (Public.Length != 0) hash ^= Public.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (defaultAcs_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultAcs);
      }
      if (Public.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Public);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (defaultAcs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultAcs);
      }
      if (Public.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Public);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountEvent other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.defaultAcs_ != null) {
        if (defaultAcs_ == null) {
          defaultAcs_ = new global::Pbx.DefaultAcsMode();
        }
        DefaultAcs.MergeFrom(other.DefaultAcs);
      }
      if (other.Public.Length != 0) {
        Public = other.Public;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            action_ = (global::Pbx.Crud) input.ReadEnum();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            if (defaultAcs_ == null) {
              defaultAcs_ = new global::Pbx.DefaultAcsMode();
            }
            input.ReadMessage(defaultAcs_);
            break;
          }
          case 34: {
            Public = input.ReadBytes();
            break;
          }
          case 66: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriptionEvent : pb::IMessage<SubscriptionEvent> {
    private static readonly pb::MessageParser<SubscriptionEvent> _parser = new pb::MessageParser<SubscriptionEvent>(() => new SubscriptionEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionEvent(SubscriptionEvent other) : this() {
      action_ = other.action_;
      topic_ = other.topic_;
      userId_ = other.userId_;
      delId_ = other.delId_;
      readId_ = other.readId_;
      recvId_ = other.recvId_;
      mode_ = other.mode_ != null ? other.mode_.Clone() : null;
      private_ = other.private_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionEvent Clone() {
      return new SubscriptionEvent(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Pbx.Crud action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.Crud Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 2;
    private string topic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Topic {
      get { return topic_; }
      set {
        topic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "del_id" field.</summary>
    public const int DelIdFieldNumber = 4;
    private int delId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelId {
      get { return delId_; }
      set {
        delId_ = value;
      }
    }

    /// <summary>Field number for the "read_id" field.</summary>
    public const int ReadIdFieldNumber = 5;
    private int readId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadId {
      get { return readId_; }
      set {
        readId_ = value;
      }
    }

    /// <summary>Field number for the "recv_id" field.</summary>
    public const int RecvIdFieldNumber = 6;
    private int recvId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecvId {
      get { return recvId_; }
      set {
        recvId_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 7;
    private global::Pbx.AccessMode mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.AccessMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 8;
    private pb::ByteString private_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Private {
      get { return private_; }
      set {
        private_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Topic != other.Topic) return false;
      if (UserId != other.UserId) return false;
      if (DelId != other.DelId) return false;
      if (ReadId != other.ReadId) return false;
      if (RecvId != other.RecvId) return false;
      if (!object.Equals(Mode, other.Mode)) return false;
      if (Private != other.Private) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Topic.Length != 0) hash ^= Topic.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (DelId != 0) hash ^= DelId.GetHashCode();
      if (ReadId != 0) hash ^= ReadId.GetHashCode();
      if (RecvId != 0) hash ^= RecvId.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      if (Private.Length != 0) hash ^= Private.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (Topic.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Topic);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (DelId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DelId);
      }
      if (ReadId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ReadId);
      }
      if (RecvId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RecvId);
      }
      if (mode_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Mode);
      }
      if (Private.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Private);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (Topic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Topic);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (DelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelId);
      }
      if (ReadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadId);
      }
      if (RecvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecvId);
      }
      if (mode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mode);
      }
      if (Private.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Private);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionEvent other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Topic.Length != 0) {
        Topic = other.Topic;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.DelId != 0) {
        DelId = other.DelId;
      }
      if (other.ReadId != 0) {
        ReadId = other.ReadId;
      }
      if (other.RecvId != 0) {
        RecvId = other.RecvId;
      }
      if (other.mode_ != null) {
        if (mode_ == null) {
          mode_ = new global::Pbx.AccessMode();
        }
        Mode.MergeFrom(other.Mode);
      }
      if (other.Private.Length != 0) {
        Private = other.Private;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            action_ = (global::Pbx.Crud) input.ReadEnum();
            break;
          }
          case 18: {
            Topic = input.ReadString();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
          case 32: {
            DelId = input.ReadInt32();
            break;
          }
          case 40: {
            ReadId = input.ReadInt32();
            break;
          }
          case 48: {
            RecvId = input.ReadInt32();
            break;
          }
          case 58: {
            if (mode_ == null) {
              mode_ = new global::Pbx.AccessMode();
            }
            input.ReadMessage(mode_);
            break;
          }
          case 66: {
            Private = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MessageEvent : pb::IMessage<MessageEvent> {
    private static readonly pb::MessageParser<MessageEvent> _parser = new pb::MessageParser<MessageEvent>(() => new MessageEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessageEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbx.ModelReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageEvent(MessageEvent other) : this() {
      action_ = other.action_;
      msg_ = other.msg_ != null ? other.msg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageEvent Clone() {
      return new MessageEvent(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Pbx.Crud action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.Crud Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private global::Pbx.ServerData msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbx.ServerData Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessageEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessageEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (!object.Equals(Msg, other.Msg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (msg_ != null) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (msg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessageEvent other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.msg_ != null) {
        if (msg_ == null) {
          msg_ = new global::Pbx.ServerData();
        }
        Msg.MergeFrom(other.Msg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            action_ = (global::Pbx.Crud) input.ReadEnum();
            break;
          }
          case 18: {
            if (msg_ == null) {
              msg_ = new global::Pbx.ServerData();
            }
            input.ReadMessage(msg_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
